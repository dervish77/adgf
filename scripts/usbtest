#!/usr/bin/expect
# usbtest-exp: 
#
# Uses System Debug Console to copy files between USB and HDD
#
# Usage: usbtest <count>
#       count         - loop count
#
# Examples:
#
#       usbtest 10              loops 10 times
#       usbtest -1              loops forever
#
# Type: expect
#
#
#
# 1.1   11/05/2005      BSL     Updated for use by Program Source
# 1.0	04/05/2001	BSL	Initial version.
#
##########################################################

# Initialize variables
set testresult "UNKNOWN"

set timeout10 10;		# Set timeout (10 sec)

set timeout3 3;			# Set timeout (3 sec)

set tcpport 7072;               # tcp port of system debug interface


# Get command line arguments
if {$argc != 1} {
	puts "Usage:  $argv0 <count>"
	exit
}

#set count [expr 3]
set initcount [lindex $argv 0];

if { $initcount < 0 } {
   set count [expr 1];
} else {
   set count [expr $initcount];
}

#set ipaddr [lindex $argv 0];	# AC outlet port number 
#set srcfile [lindex $argv 1];
#set destfile [lindex $argv 2];

set ipaddr      "192.168.0.10"

set filename    "test1meg.bin"

set usbfile1    "/usb/part000/$filename"
set usbfile2    "/usb/part000/test.bin"
set hddfile     "d:/v0/$filename"

set resultfile [open "~/var/usbtestexp-$ipaddr.log" "w"]


#****************************************************
# Procedure: docopy()
#****************************************************
proc docopy { src dest } {
	send "file main cp $src $dest\r"
        expect {
               "SysDbg>" {
	               set testresult "PASS"
	       }
        }
}

#******************TOP of LOOP***********************

spawn bash
expect "$"

send "telnet $ipaddr $tcpport \r"
expect {
	timeout10 {
		set testresult "FAIL"
		puts "\nTELNET to Terminal Server TIMED OUT\n"
	}
	"Connection refused" {
		set testresult "BUSY"
		puts "\nTCP port $tcpport is busy, try again in a few seconds."
	}
	"SysDbg>" {
		set testresult "ACTIVE"

		send "\r"
                expect {
                	timeout10 {
		                set testresult "FAIL"
	                	puts "\nModule is not running\n"
	                }
                	"SysDbg>" {
	         	        set testresult "PASS"
	                }
                }
                sleep 1

                # loop forever
                while { $count > 0 } {

                        # copy file from USB to HDD
                        docopy $usbfile1 $hddfile      

                        # copy file from HDD to USB
                        docopy $hddfile $usbfile2  

                        if { $initcount < 0 } {
                                set count 1
                        } else {
                                incr count -1
                        }
                }

                send "exit\r"
		expect {
			timeout3 {
		                set testresult "FAIL"
                                puts "\nSysDbg exit TIMED OUT\n"
			}
			"$" {

			}
		}

	}
}

send "exit\r"; # Exit ksh
close; # Close spawned process
wait;  # Wait for ksh to "exit"

#****************BOTTOM of LOOP**********************
puts $resultfile "usbtestexp $ipaddr - $testresult"
close $resultfile

exit


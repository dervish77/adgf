#!/usr/local/bin/perl
#
# csgen	
#
# 	Generates config spec templates for ClearCase.
#
# usage:
#	csgen <type> [<branch|release> <label>]
#
#	<type>		    - type of config spec 
#			      [REL|DEV|INT|BUG|ER]
#
#	<branch|release>    - branch name for DEV, INT, BUG, ER, 
#			      release label for REL type
#
#	[<label>]           - release label for ER type
#
# notes:
#	- assumes that branch types or label types already exist.
#	- note this script is hardcoded for SMM project.
#
# revision:
#	11/09/98 BSL	originated
#
#

if (@ARGV < 1) {
   print "Missing arguments!\n";
   &Usage;
   exit 1;
}

if (@ARGV == 1) {
   if ( $ARGV[0] =~ /PROJ/ ) {
      $type = $ARGV[0];
   }
   else
   {
      print "Not enough arguments for type!\n";
      &Usage;
      exit 1;
   }
}

if (@ARGV > 1) {
   $type = $ARGV[0];
   $branch = $ARGV[1];

   if ( $ARGV[0] =~ /ER/ ) {
      if ( @ARGV == 3) {
         $label = $ARGV[2];
      }
      else
      {
         print "Not enough arguments for type!\n";
         &Usage;
         exit 1;
      }
   }
}


#
# generate specified config spec type
#
if ( $type =~ /REL/) {
   &MakeReleaseConfigSpec;
}
elsif ( $type =~ /DEV/) {
   &MakeDevelopmentConfigSpec;
}
elsif ( $type =~ /INT/) {
   &MakeIntegrationConfigSpec;
}
elsif ( $type =~ /BUG/) {
   &MakeBugfixConfigSpec;
}
elsif ( $type =~ /ER/) {
   &MakeErConfigSpec;
}
else {
   print "Error - unknown config spec type specified - $type\n";
   print "      - valid types are [REL|DEV|INT|BUG|ER]\n";
   exit 1;
}

exit 0;


#########


sub MakeReleaseConfigSpec
{
   $FILENAME = "smm_$branch.cs";

   print "Generating config spec template - $FILENAME\n";

   open(OUTFILE, "> $FILENAME") or die "Can't open output file: $FILENAME : $!\n";

   print OUTFILE "# Config spec template for release build (read only).\n\n";
   print OUTFILE "element * ", $branch, " -nocheckout\n";
   print OUTFILE "element * /main/LATEST -nocheckout\n";

   print OUTFILE "\n# end of template, generated by csgen\n";

   close(OUTFILE);
}


sub MakeDevelopmentConfigSpec
{
   $FILENAME = "smm_$branch.cs";

   print "Generating config spec template - $FILENAME\n";

   open(OUTFILE, "> $FILENAME") or die "Can't open output file: $FILENAME : $!\n";

   print OUTFILE "# Config spec template for feature development.\n\n";
   print OUTFILE "element * CHECKEDOUT\n";
   print OUTFILE "element * .../", $branch, "/LATEST\n";

   print OUTFILE "\n# pick next line to use a label as branch off point\n";
   print OUTFILE "# (note that this may be used in addition to line below)\n";
   print OUTFILE "# element * <release_label> -mkbranch ", $branch, "\n";

   print OUTFILE "\n# pick next line to use main latest as branch off point\n";
   print OUTFILE "# (note that you must use this when merging to main)\n";
   print OUTFILE "element * /main/LATEST -mkbranch ", $branch, "\n";

   print OUTFILE "\n# end of template, generated by csgen\n";

   close(OUTFILE);
}


sub MakeIntegrationConfigSpec
{
   $FILENAME = "smm_$branch.cs";

   print "Generating config spec template - $FILENAME\n";

   open(OUTFILE, "> $FILENAME") or die "Can't open output file: $FILENAME : $!\n";

   print OUTFILE "# Config spec template for integration.\n\n";
   print OUTFILE "element * CHECKEDOUT\n";
   print OUTFILE "element * .../", $branch, "/LATEST\n";
   print OUTFILE "element * /main/LATEST -mkbranch ", $branch, "\n";

   print OUTFILE "\n# end of template, generated by csgen\n";

   close(OUTFILE);
}


sub MakeBugfixConfigSpec
{
   $FILENAME = "smm_$branch.cs";

   print "Generating config spec template - $FILENAME\n";

   open(OUTFILE, "> $FILENAME") or die "Can't open output file: $FILENAME : $!\n";

   print OUTFILE "# Config spec template for bug fix branch.\n\n";
   print OUTFILE "element * CHECKEDOUT\n";
   print OUTFILE "element * .../", $branch, "/LATEST\n";
   print OUTFILE "element * /main/LATEST -mkbranch $branch\n";

   print OUTFILE "\n# end of template, generated by csgen\n";

   close(OUTFILE);
}


sub MakeErConfigSpec
{
   $FILENAME = "smm_$branch.cs";

   print "Generating config spec template - $FILENAME\n";

   open(OUTFILE, "> $FILENAME") or die "Can't open output file: $FILENAME : $!\n";

   print OUTFILE "# Config spec template for engineering release branch.\n\n";
   print OUTFILE "element * CHECKEDOUT\n";
   print OUTFILE "element * .../", $branch, "/LATEST\n";
   print OUTFILE "element * $label -mkbranch ", $branch, "\n";
   print OUTFILE "element * /main/LATEST -nocheckout\n";

   print OUTFILE "\n# end of template, generated by csgen\n";

   close(OUTFILE);
}


sub Usage
{
   print "Usage:  csgen <type> <branch|release>  [<label>]\n";
   print "i.e.    csgen REL    REL_SMM_PROD_01.00.00\n";
   print "i.e.    csgen DEV    dev_ne_feature\n";
   print "i.e.    csgen INT    int_ne_smm_beta_01.03.00\n";
   print "i.e.    csgen BUG    dev_ne_mr0225\n";
   print "i.e.    csgen ER     smm_er_01.05.00   REL_SMM_PROD_01.05.00\n";
}

# end of csgen

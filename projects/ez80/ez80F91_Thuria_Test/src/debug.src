; ZiLOG eZ80 ANSI C Compiler Release 2.06
; -alias -debug -intsrc -nomodsect -optsize -localcse
; -peephole -globalopt -nosdiopt -bitfieldsize=24 -charsize=8
; -doublesize=32 -floatsize=32 -intsize=24 -longsize=32
; -nofastcall -noregvar -nostkck -nooptlink -swap 
	FILE	".\DEBUG.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT code
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "map_s_t",140
.DEFINE "roomnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "roomname"
.VALUE 2
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.DEFINE "beenhere"
.VALUE 122
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "inside"
.VALUE 123
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n"
.VALUE 124
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "s"
.VALUE 126
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "e"
.VALUE 128
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "w"
.VALUE 130
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "d"
.VALUE 132
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "u"
.VALUE 134
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "special"
.VALUE 136
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "object"
.VALUE 138
.CLASS 8
.TYPE 3
.ENDEF
.ENDREC "map_s_t"
.BEGREC "object_s_t",244
.DEFINE "objnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "key"
.VALUE 4
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "prep"
.VALUE 44
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "name"
.VALUE 84
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "examine"
.VALUE 124
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "object_s_t"
.BEGREC "special_s_t",124
.DEFINE "spnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "phrase"
.VALUE 4
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "special_s_t"
.BEGREC "magic_s_t",168
.DEFINE "mgnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "fromroom"
.VALUE 4
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "toroom"
.VALUE 6
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "word"
.VALUE 8
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "phrase"
.VALUE 48
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "magic_s_t"
.BEGREC "rank_s_t",162
.DEFINE "rnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "title"
.VALUE 2
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "phrase"
.VALUE 42
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "rank_s_t"
.BEGREC "verb_s_t",44
.DEFINE "vnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "word"
.VALUE 2
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "type"
.VALUE 42
.CLASS 8
.TYPE 3
.ENDEF
.ENDREC "verb_s_t"
.BEGREC "room_s_t",124
.DEFINE "roomnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "linenum"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "roomline"
.VALUE 4
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "room_s_t"
.BEGREC "intro_s_t",122
.DEFINE "linenum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "introline"
.VALUE 2
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "intro_s_t"
.BEGREC "inv_s_t",22
.DEFINE "count"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "list"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 99
.ENDEF
.ENDREC "inv_s_t"
.BEGREC "chest_s_t",52
.DEFINE "count"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "list"
.VALUE 2
.CLASS 8
.DIM 25
.TYPE 99
.ENDEF
.ENDREC "chest_s_t"
.BEGREC "cmd_s_t",46
.DEFINE "type"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "length"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "cmd"
.VALUE 6
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.ENDREC "cmd_s_t"
.BEGREC "game_s_t",857
.DEFINE "play_game"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "suppress_instructions"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "adult_enabled"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "adult_count"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "debug_enabled"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "verbose"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "have_lamp"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "lamp_is_on"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "current_room"
.VALUE 10
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 12
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "health"
.VALUE 15
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "moves"
.VALUE 18
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "oil"
.VALUE 21
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "load_game"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "save_game"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "game_loaded"
.VALUE 26
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "game_saved"
.VALUE 27
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "load_file_name"
.VALUE 28
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "save_file_name"
.VALUE 68
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "inventory"
.VALUE 108
.CLASS 8
.TAG "inv_s_t"
.TYPE 8
.ENDEF
.DEFINE "chest"
.VALUE 130
.CLASS 8
.TAG "chest_s_t"
.TYPE 8
.ENDEF
.DEFINE "cmdstring"
.VALUE 182
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.DEFINE "argcount"
.VALUE 302
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "list"
.VALUE 305
.CLASS 8
.DIM 12
.TAG "cmd_s_t"
.TYPE 104
.ENDEF
.ENDREC "game_s_t"
;    1	/*****************************************************************************
;    2	 *
;    3	 *	Source code for handling debug commands.  Note can be enabled 
;    4	 *	player entering password of "hpl".
;    5	 *
;    6	 *
;    7	 *	File:	debug.c
;    8	 *
;    9	 *	Author: Brian Lingard
;   10	 *
;   11	 *	Date:	12/04/96
;   12	 *
;   13	 *	Revs:
;   14	 *	  0.0 	12/04/96  originated
;   15	 *
;   16	 *	
;   17	 *	debug commands:
;   18	 *	
;   19	 *		debug help
;   20	 *		debug status
;   21	 *
;   22	 *		debug list <room_num>
;   23	 *		debug goto <room_num>
;   24	 *
;   25	 *		debug score <new_score>
;   26	 *		debug health <new_health>
;   27	 *		debug oil <new_oil>
;   28	 *		debug invcnt <new_count>
;   29	 *
;   30	 *		debug special <room_num> <special>
;   31	 *		debug object <room_num> <object>
;   32	 *	
;   33	 *		debug show map
;   34	 *		debug show room
;   35	 *		debug show object <obj_num>
;   36	 *		debug show special <spec_num>
;   37	 *		debug show magic <mg_num>
;   38	 *		debug show rank <rk_num>
;   39	 *		debug show verb <vb_num>
;   40	 *	
;   41	 *****************************************************************************/
;   42	
;   43	
;   44	#include <stdio.h>
;   45	#include <stdlib.h>
;   46	#include <string.h>
;   47	
;   48	#ifndef MAIN_H
;   49	#include "main.h"
;   50	#endif
;   51	
;   52	
;   53	
;   54	
;   55	
;   56	
;   57	/* HandleDebugCmd() - handle multi-word command
;   58	 *
;   59	 */
;   60	void HandleDebugCmd(GAME_S_T *game)
;   61	{
_HandleDebugCmd:
.DEFINE "_HandleDebugCmd"

.VALUE _HandleDebugCmd

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "HandleDebugCmd",61,"_HandleDebugCmd"

.LINE 61

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

;   62	#ifdef DUNGEON_DEBUG
;   63	   INDEX_T index;
;   64	   int i;
;   65	
;   66	  if (game->debug_enabled)
;   67	  {
;   68	
;   69	   if ( strcmp( game->list[1].cmd, "help" ) == 0 )
;   70	   {
;   71	      printf("\ndebug help\n");
;   72	      printf("debug status\n");
;   73	      printf("\n");
;   74	      printf("debug list <room_num>\n");
;   75	      printf("debug goto <room_num>\n");
;   76	      printf("\n");
;   77	      printf("debug score <new_score>\n");
;   78	      printf("debug health <new_health>\n");
;   79	      printf("debug oil <new_oil>\n");
;   80	      printf("debug invcnt <new_count>\n");
;   81	      printf("\n");
;   82	      printf("debug special <room_num> <special>\n");
;   83	      printf("debug object <room_num> <object>\n");
;   84	      printf("\n");
;   85	      printf("debug show map\n");
;   86	      printf("debug show room\n");
;   87	      printf("debug show object <obj_num>\n");
;   88	      printf("debug show special <spec_num>\n");
;   89	      printf("debug show magic <mg_num>\n");
;   90	      printf("debug show rank <rk_num>\n");
;   91	      printf("debug show verb <vb_num>\n");
;   92	   }
;   93	   else if ( strcmp( game->list[1].cmd, "status" ) == 0 )
;   94	   {
;   95	      printf("verbose      = %d\n", game->verbose);
;   96	      printf("have_lamp    = %d\n", game->have_lamp);
;   97	      printf("lamp_is_on   = %d\n", game->lamp_is_on);
;   98	      printf("current_room = %d\n", game->current_room);
;   99	      printf("score        = %d\n", game->score);
;  100	      printf("health       = %d\n", game->health);
;  101	      printf("moves        = %d\n", game->moves);
;  102	      printf("oil          = %d\n", game->oil);
;  103	   }
;  104	   else if ( strcmp( game->list[1].cmd, "list" ) == 0 )
;  105	   {
;  106	      index = atoi( game->list[2].cmd );
;  107	      printf("List room #%d\n", index);
;  108	      printf("  roomnum   = %d\n", map[index].roomnum);
;  109	      printf("  roomname  = %s\n", map[index].roomname);
;  110	      printf("  beenhere  = %d\n", map[index].beenhere);
;  111	      printf("  inside    = %d\n", map[index].inside);
;  112	      printf("  n         = %d\n", map[index].n);
;  113	      printf("  s         = %d\n", map[index].s);
;  114	      printf("  e         = %d\n", map[index].e);
;  115	      printf("  w         = %d\n", map[index].w);
;  116	      printf("  d         = %d\n", map[index].d);
;  117	      printf("  u         = %d\n", map[index].u);
;  118	      printf("  special   = %d\n", map[index].special);
;  119	      printf("  object    = %d\n", map[index].object);
;  120	   }
;  121	   else if ( strcmp( game->list[1].cmd, "special" ) == 0 )
;  122	   {
;  123	      map[ atoi( game->list[2].cmd ) ].special = atoi( game->list[3].cmd );
;  124	   }
;  125	   else if ( strcmp( game->list[1].cmd, "object" ) == 0 )
;  126	   {
;  127	      map[ atoi( game->list[2].cmd ) ].object = atoi( game->list[3].cmd );
;  128	   }
;  129	   else if ( strcmp( game->list[1].cmd, "score" ) == 0 )
;  130	   {
;  131	      game->score = atoi( game->list[2].cmd );
;  132	   }
;  133	   else if ( strcmp( game->list[1].cmd, "health" ) == 0 )
;  134	   {
;  135	      game->health = atoi( game->list[2].cmd );
;  136	   }
;  137	   else if ( strcmp( game->list[1].cmd, "oil" ) == 0 )
;  138	   {
;  139	      game->oil = atoi( game->list[2].cmd );
;  140	   }
;  141	   else if ( strcmp( game->list[1].cmd, "goto" ) == 0 )
;  142	   {
;  143	      game->current_room = atoi( game->list[2].cmd );
;  144	   }
;  145	   else if ( strcmp( game->list[1].cmd, "invcnt" ) == 0 )
;  146	   {
;  147	      game->inventory.count = atoi( game->list[2].cmd );
;  148	   }
;  149	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  150			&& strcmp( game->list[2].cmd, "room" ) == 0 )
;  151	   {
;  152	      printf("\nCurrent room # is - %d\n", game->current_room);
;  153	   }
;  154	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  155			&& strcmp( game->list[2].cmd, "map" ) == 0 )
;  156	   {
;  157	      i = 0;
;  158	      printf("\n");
;  159	      while ( map[i].roomnum != RM_NULL )
;  160	      {
;  161	         printf("Room %2d  %20s \t spec = %2d, obj = %2d\n",
;  162			map[i].roomnum, map[i].roomname, 
;  163			map[i].special, map[i].object);
;  164	         i++;
;  165	      }
;  166	   }
;  167	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  168			&& strcmp( game->list[2].cmd, "object" ) == 0 )
;  169	   {
;  170	      index = atoi( game->list[3].cmd );
;  171	      printf("Object # - %d\n", index );
;  172	      printf("  objnum   = %d\n", object[index].objnum);
;  173	      printf("  score    = %d\n", object[index].score);
;  174	      printf("  key      = %s\n", object[index].key);
;  175	      printf("  prep     = %s\n", object[index].prep);
;  176	      printf("  name     = %s\n", object[index].name);
;  177	      printf("  examine  = %s\n", object[index].examine);
;  178	   }
;  179	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  180			&& strcmp( game->list[2].cmd, "special" ) == 0 )
;  181	   {
;  182	      index = atoi( game->list[3].cmd );
;  183	      printf("Special # - %d\n", index );
;  184	      printf("  spnum    = %d\n", special[index].spnum);
;  185	      printf("  score    = %d\n", special[index].score);
;  186	      printf("  phrase   = %s\n", special[index].phrase);
;  187	   }
;  188	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  189			&& strcmp( game->list[2].cmd, "magic" ) == 0 )
;  190	   {
;  191	      index = atoi( game->list[3].cmd );
;  192	      printf("Magic # - %d\n", index );
;  193	      printf("  mgnum     = %d\n", magic[index].mgnum);
;  194	      printf("  score     = %d\n", magic[index].score);
;  195	      printf("  fromroom  = %d\n", magic[index].fromroom);
;  196	      printf("  toroom    = %d\n", magic[index].toroom);
;  197	      printf("  word      = %s\n", magic[index].word);
;  198	      printf("  phrase    = %s\n", magic[index].phrase);
;  199	   }
;  200	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  201			&& strcmp( game->list[2].cmd, "rank" ) == 0 )
;  202	   {
;  203	      index = atoi( game->list[3].cmd );
;  204	      printf("Rank # - %d\n", index );
;  205	      printf("  rnum      = %d\n", rank[index].rnum);
;  206	      printf("  title     = %s\n", rank[index].title);
;  207	      printf("  phrase    = %s\n", rank[index].phrase);
;  208	   }
;  209	   else if ( strcmp( game->list[1].cmd, "show" ) == 0 
;  210			&& strcmp( game->list[2].cmd, "verb" ) == 0 )
;  211	   {
;  212	      index = atoi( game->list[3].cmd );
;  213	      printf("Verb # - %d\n", index );
;  214	      printf("  vnum      = %d\n", verb[index].vnum);
;  215	      printf("  word      = %s\n", verb[index].word);
;  216	      printf("  type      = %d\n", verb[index].type);
;  217	   }
;  218	   else
;  219	   {
;  220	      printf("\nI don't know how to - debug %s\n", game->list[1].cmd);
;  221	   }
;  222	
;  223	  }
;  224	  else
;  225	  {
;  226	   printf("\nSorry, debug is not enabled.\n");
;  227	  }
;  228	#endif
;  229	}
.LINE 229

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HandleDebugCmd ***************************
;Name                         Addr/Register   Size   Type
;game                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "HandleDebugCmd",229,"_HandleDebugCmd"
;  230	
;  231	
;  232	/* HandleDebug() - handle debug command
;  233	 *
;  234	 */
;  235	void HandleDebug(GAME_S_T *game)
;  236	{
_HandleDebug:
.DEFINE "_HandleDebug"

.VALUE _HandleDebug

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "HandleDebug",236,"_HandleDebug"

.LINE 236

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

;  237	#ifdef DUNGEON_DEBUG
;  238	   HandleDebugCmd( game );
;  239	#else
;  240	   printf("\nI don't know how to - %s\n", game->list[0].cmd);
.LINE 240

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	BC,(IX+6)
	LD	IY,311
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;  241	#endif
;  242	}
.LINE 242

	LD	SP,IX
	POP	IX
	RET	


;**************************** _HandleDebug ***************************
;Name                         Addr/Register   Size   Type
;_printf                             IMPORT  -----   function
;game                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "HandleDebug",242,"_HandleDebug"
	SEGMENT STRSECT
L__1:
	DB	10
	DB	"I don't know how to - %s"
	DB	10,0
	XREF _printf:ROM
	XDEF _HandleDebug
	XDEF _HandleDebugCmd
	END

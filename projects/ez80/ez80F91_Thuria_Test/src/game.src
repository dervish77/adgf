; ZiLOG eZ80 ANSI C Compiler Release 2.06
; -alias -debug -intsrc -nomodsect -optsize -localcse
; -peephole -globalopt -nosdiopt -bitfieldsize=24 -charsize=8
; -doublesize=32 -floatsize=32 -intsize=24 -longsize=32
; -nofastcall -noregvar -nostkck -nooptlink -swap 
	FILE	".\GAME.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT code
.BEGREC "map_s_t",140
.DEFINE "roomnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "roomname"
.VALUE 2
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.DEFINE "beenhere"
.VALUE 122
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "inside"
.VALUE 123
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n"
.VALUE 124
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "s"
.VALUE 126
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "e"
.VALUE 128
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "w"
.VALUE 130
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "d"
.VALUE 132
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "u"
.VALUE 134
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "special"
.VALUE 136
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "object"
.VALUE 138
.CLASS 8
.TYPE 3
.ENDEF
.ENDREC "map_s_t"
.BEGREC "object_s_t",244
.DEFINE "objnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "key"
.VALUE 4
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "prep"
.VALUE 44
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "name"
.VALUE 84
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "examine"
.VALUE 124
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "object_s_t"
.BEGREC "special_s_t",124
.DEFINE "spnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "phrase"
.VALUE 4
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "special_s_t"
.BEGREC "magic_s_t",168
.DEFINE "mgnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "fromroom"
.VALUE 4
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "toroom"
.VALUE 6
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "word"
.VALUE 8
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "phrase"
.VALUE 48
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "magic_s_t"
.BEGREC "rank_s_t",162
.DEFINE "rnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "title"
.VALUE 2
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "phrase"
.VALUE 42
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "rank_s_t"
.BEGREC "verb_s_t",44
.DEFINE "vnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "word"
.VALUE 2
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "type"
.VALUE 42
.CLASS 8
.TYPE 3
.ENDEF
.ENDREC "verb_s_t"
.BEGREC "room_s_t",124
.DEFINE "roomnum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "linenum"
.VALUE 2
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "roomline"
.VALUE 4
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "room_s_t"
.BEGREC "intro_s_t",122
.DEFINE "linenum"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "introline"
.VALUE 2
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.ENDREC "intro_s_t"
.BEGREC "inv_s_t",22
.DEFINE "count"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "list"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 99
.ENDEF
.ENDREC "inv_s_t"
.BEGREC "chest_s_t",52
.DEFINE "count"
.VALUE 0
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "list"
.VALUE 2
.CLASS 8
.DIM 25
.TYPE 99
.ENDEF
.ENDREC "chest_s_t"
.BEGREC "cmd_s_t",46
.DEFINE "type"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "length"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "cmd"
.VALUE 6
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.ENDREC "cmd_s_t"
.BEGREC "game_s_t",857
.DEFINE "play_game"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "suppress_instructions"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "adult_enabled"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "adult_count"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "debug_enabled"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "verbose"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "have_lamp"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "lamp_is_on"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "current_room"
.VALUE 10
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "score"
.VALUE 12
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "health"
.VALUE 15
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "moves"
.VALUE 18
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "oil"
.VALUE 21
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "load_game"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "save_game"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "game_loaded"
.VALUE 26
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "game_saved"
.VALUE 27
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "load_file_name"
.VALUE 28
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "save_file_name"
.VALUE 68
.CLASS 8
.DIM 40
.TYPE 98
.ENDEF
.DEFINE "inventory"
.VALUE 108
.CLASS 8
.TAG "inv_s_t"
.TYPE 8
.ENDEF
.DEFINE "chest"
.VALUE 130
.CLASS 8
.TAG "chest_s_t"
.TYPE 8
.ENDEF
.DEFINE "cmdstring"
.VALUE 182
.CLASS 8
.DIM 120
.TYPE 98
.ENDEF
.DEFINE "argcount"
.VALUE 302
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "list"
.VALUE 305
.CLASS 8
.DIM 12
.TAG "cmd_s_t"
.TYPE 104
.ENDEF
.ENDREC "game_s_t"
;    1	/*****************************************************************************
;    2	 *
;    3	 *	Source code for main game engine routines.
;    4	 *
;    5	 *	File:	game.c
;    6	 *
;    7	 *	Author: Brian Lingard
;    8	 *
;    9	 *	Date:	12/04/96
;   10	 *
;   11	 *	Revs:
;   12	 *	  0.0 	12/04/96  originated
;   13	 *
;   14	 *****************************************************************************/
;   15	
;   16	
;   17	#include <stdio.h>
;   18	#include <string.h>
;   19	
;   20	#ifndef MAIN_H
;   21	#include "main.h"
;   22	#endif
;   23	
;   24	
;   25	
;   26	
;   27	/*
;   28	 *  GLOBALS
;   29	 */
;   30	extern void HandleLetterCmd(GAME_S_T *game);
;   31	extern void HandleSingleCmd(GAME_S_T *game);
;   32	extern void HandleMultiCmd(GAME_S_T *game);
;   33	
;   34	
;   35	
;   36	
;   37	/*  ParseString	- general purpose string parser
;   38	 *
;   39	 *  Parameters:
;   40	 *	string	- pointer to string to be parsed
;   41	 *	args	- pointer to parsed array of strings
;   42	 *
;   43	 *  Returns:
;   44	 *	count	- count of substrings in array
;   45	 */
;   46	int 
;   47	ParseString(char *string, char *args[])
;   48	{
_ParseString:
.DEFINE "_ParseString"

.VALUE _ParseString

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "ParseString",48,"_ParseString"

.LINE 48

.DEFINE "string"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "args"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "argcount"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -4

.TYPE 2

.ENDEF

.DEFINE "argstart"

.CLASS 65

.VALUE -7

.TYPE 34

.ENDEF

.DEFINE "arglen"

.CLASS 65

.VALUE -10

.TYPE 4

.ENDEF

;   49	   char c, *argstart;
;   50	   int arglen, argcount=0;
.LINE 50

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-13
	LD	SP,IY
	LD	BC,0
	LD	(IX+-3),BC
;   51	   
;   52	   argstart = string;
.LINE 52

	LD	BC,(IX+6)
	LD	(IX+-7),BC
;   53	
;   54	   for (; *string != '\0'; string++) {
.LINE 54

	JMP	L_6
L_4:
;   55	      c = *string;
.LINE 55

	LD	IY,(IX+6)
	LD	A,(IY)
	LD	(IX+-4),A
;   56	//      if (isspace(c) || (c == '\0')) {
;   57	      if (c == ' ' || (c == '\0')) {
.LINE 57

	LD	A,(IX+-4)
	CP	A,32
	JR	Z,L_3
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_5
L_3:
;   58	         args[argcount] = argstart;
.LINE 58

	LD	BC,(IX+-3)
	LD	HL,3
	CALL	__imuls
	LD	(IX+-13),HL
	LD	BC,(IX+-13)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,(IX+-7)
	LD	(HL),BC
;   59	         arglen = string - argstart;
.LINE 59

	LD	HL,(IX+6)
	LD	BC,(IX+-7)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-10),HL
;   60	         args[argcount][arglen] = '\0';
.LINE 60

	LD	BC,(IX+-13)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,(IX+-10)
	LD	HL,(HL)
	ADD	HL,BC
	XOR	A,A
	LD	(HL),A
;   61	         argcount++;
.LINE 61

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   62	         argstart = string + 1;
.LINE 62

	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-7),BC
;   63	      }
;   64	   }
L_5:
.LINE 64

	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
L_6:
	LD	IY,(IX+6)
	LD	A,(IY)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_4
;   65	
;   66	   return(argcount);
.LINE 66

	LD	HL,(IX+-3)
;   67	} /* end of ParseString() */
.LINE 67

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ParseString ***************************
;Name                         Addr/Register   Size   Type
;arglen                               IX-10      3   variable
;argstart                              IX-7      3   variable
;c                                     IX-4      1   variable
;argcount                              IX-3      3   variable
;args                                  IX+9      3   parameter
;string                                IX+6      3   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ParseString",67,"_ParseString"
;   68	
;   69	
;   70	
;   71	/* HaveObject() - test if carrying specified object
;   72	 *
;   73	 */
;   74	BOOLEAN_T HaveObject(GAME_S_T *game, INDEX_T obj, INDEX_T *index)
;   75	{
_HaveObject:
.DEFINE "_HaveObject"

.VALUE _HaveObject

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "HaveObject",75,"_HaveObject"

.LINE 75

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "obj"

.CLASS 65

.VALUE 9

.TYPE 3

.ENDEF

.DEFINE "index"

.CLASS 65

.VALUE 12

.TYPE 35

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	LD	BC,0
	LD	(IX+-3),BC
;   76	   int i;
;   77	
;   78	   for (i = 0; i < game->inventory.count; i++)
.LINE 78

	JMP	L_13
L_11:
;   79	   {
;   80	      if (game->inventory.list[i] == obj)
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
.LINE 80

	LD	DE,(IX+6)
	LD	HL,110
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+9)
	LD	HL,(HL)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_12
;   81	      {
;   82	         *index = i;
	LD	HL,(IX+12)
.LINE 82

	LD	BC,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   83	         return(TRUE);
.LINE 83

	LD	A,1
	JMP	L_15
;   84	      }
;   85	   }
L_12:
.LINE 85

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_13:
	LD	IY,(IX+6)
	LD	BC,(IY+108)
	CALL	__stoi
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_11
;   86	
;   87	   return(FALSE);
.LINE 87

	XOR	A,A
;   88	}
L_15:
.LINE 88

	LD	SP,IX
	POP	IX
	RET	


;**************************** _HaveObject ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;index                                IX+12      3   parameter
;obj                                   IX+9      2   parameter
;game                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "HaveObject",88,"_HaveObject"
;   89	
;   90	
;   91	/* DescribeRoom() - show full room description
;   92	 *
;   93	 */
;   94	void DescribeRoom(GAME_S_T *game)
;   95	{
_DescribeRoom:
.DEFINE "_DescribeRoom"

.VALUE _DescribeRoom

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "DescribeRoom",95,"_DescribeRoom"

.LINE 95

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "found"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

;   96	   int c, r;
;   97	   BOOLEAN_T found;
;   98	
;   99	
;  100	   found = FALSE;
.LINE 100

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	LD	B,0
	LD	(IX+-7),B
;  101	   c = game->current_room;
.LINE 101

	LD	IY,(IX+6)
	LD	BC,(IY+10)
	CALL	__stoi
	LD	(IX+-6),HL
;  102	   r = 0;
.LINE 102

	LD	BC,0
	LD	(IX+-3),BC
;  103	
;  104	   map[c].beenhere = TRUE;
.LINE 104

	LD	BC,(IX+-6)
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	B,1
	LD	IY,HL
	LD	(IY+122),B
;  105	
;  106	   while ( room[r].roomnum > RM_NULL )
.LINE 106

	JMP	L_19
L_20:
;  107	   {
;  108	      if ( room[r].roomnum == c )
.LINE 108

	LD	BC,(IX+-3)
	LD	HL,124
	CALL	__imuls
	LD	BC,_room
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoi
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_18
;  109	      {
;  110	         found = TRUE;
.LINE 110

	LD	A,1
	LD	(IX+-7),A
;  111	         break;
.LINE 111

	JMP	L_27
;  112	      }
L_18:
.LINE 112

;  113	      r++;
.LINE 113

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  114	   }
L_19:
.LINE 114

	LD	BC,(IX+-3)
	LD	HL,124
	CALL	__imuls
	LD	BC,_room
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoi
	LD	BC,HL
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	M,L_20
L_27:
;  115	   
;  116	   if (found) 
.LINE 116

	LD	A,(IX+-7)
	OR	A,A
	JR	Z,L_26
;  117	   {
;  118	      while ( (room[r].roomnum == c) && (room[r].linenum > -1) )
.LINE 118

	JMP	L_23
L_24:
;  119	      {
;  120	         printf("  %s\n", room[r].roomline);
.LINE 120

	LD	BC,(IX+-3)
	LD	HL,124
	CALL	__imuls
	LD	BC,_room
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+4
	LD	BC,L__10
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;  121	         r++;
.LINE 121

	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  122	      }
L_23:
.LINE 122

	LD	BC,(IX+-3)
	LD	HL,124
	CALL	__imuls
	LD	BC,_room
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoi
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_28
	LD	BC,(IX+-3)
	LD	HL,124
	CALL	__imuls
	LD	BC,_room
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+2)
	CALL	__stoi
	LD	BC,HL
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	M,L_24
	JMP	L_28
;  123	   }
;  124	   else
L_26:
.LINE 124

;  125	   {
;  126	      printf("Error - room description not found!\n");
	LD	BC,L__13
	PUSH	BC
.LINE 126

	CALL	_printf
	POP	BC
;  127	//      exit(1);
;  128	   }
;  129	}
L_28:
.LINE 129

	LD	SP,IX
	POP	IX
	RET	


;**************************** _DescribeRoom ***************************
;Name                         Addr/Register   Size   Type
;_printf                             IMPORT  -----   function
;_room                               IMPORT    124   variable
;_map                                IMPORT    140   variable
;found                                 IX-7      1   variable
;c                                     IX-6      3   variable
;r                                     IX-3      3   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "DescribeRoom",129,"_DescribeRoom"
	SEGMENT STRSECT
L__10:
	DB	"  %s"
	DB	10,0
L__13:
	DB	"Error - room description not found!"
	DB	10,0
	SEGMENT code
;  130	
;  131	
;  132	/* DescribeObject() - show object description
;  133	 *
;  134	 */
;  135	void DescribeObject(GAME_S_T *game)
;  136	{
_DescribeObject:
.DEFINE "_DescribeObject"

.VALUE _DescribeObject

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "DescribeObject",136,"_DescribeObject"

.LINE 136

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "obj"

.CLASS 65

.VALUE -5

.TYPE 3

.ENDEF

;  137	   INDEX_T	obj;
;  138	   int 		i;
;  139	
;  140	   if (game->current_room == RM_MAIN_CHAMBER)
.LINE 140

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-11
	LD	SP,IY
	LD	IY,(IX+6)
	LD	BC,(IY+10)
	CALL	__stoi
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_37
;  141	   {
;  142	      if (game->chest.count == 0)
.LINE 142

	LD	IY,(IX+6)
	LD	BC,130
	CALL	__sldiy
	LD	BC,HL
	CALL	__stoi
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_34
;  143	      {
;  144	         printf("  %s\n", special[SE_CHEST_EMPTY].phrase);
	LD	BC,_special+4
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
.LINE 144

	CALL	_printf
	POP	BC
	POP	BC
;  145	      }
;  146	      else
.LINE 146

	JMP	L_38
L_34:
;  147	      {
;  148	         printf("  %s\n", special[SE_CHEST_FULL].phrase);
	LD	BC,_special+128
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
.LINE 148

	LD	(IX+-11),IY
	CALL	_printf
	LD	IY,(IX+-11)
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
;  149	         for (i = 0; i < game->chest.count; i++)
.LINE 149

	JMP	L_32
L_30:
;  150	         {
;  151	            printf("    %s\n", object[game->chest.list[i]].name);
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
.LINE 151

	LD	DE,(IX+6)
	LD	HL,132
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoi
	LD	BC,HL
	LD	HL,244
	CALL	__imuls
	LD	BC,_object
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+84
	LD	BC,L__19
	PUSH	BC
	LD	(IX+-11),IY
	CALL	_printf
	LD	IY,(IX+-11)
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  152	         }
L_32:
.LINE 152

	LD	IY,(IX+6)
	LD	BC,130
	CALL	__sldiy
	LD	BC,HL
	CALL	__stoi
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_30
	JMP	L_38
;  153	      }
;  154	   }
;  155	   else
L_37:
.LINE 155

;  156	   {
;  157	      obj = map[game->current_room].object;
.LINE 157

	LD	IY,(IX+6)
	LD	BC,(IY+10)
	CALL	__stoi
	LD	BC,HL
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	BC,138
	LD	IY,HL
	CALL	__sldiy
	LD	BC,HL
	LD	(IX+-5),C
	LD	(IX+-4),B
;  158	
;  159	      if (obj > OBJ_NULL)
.LINE 159

	LD	BC,(IX+-5)
	CALL	__stoi
	LD	BC,HL
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L_38
;  160	      {
;  161	         printf("  There %s %s here!\n", 
;  162			object[obj].prep, object[obj].name); 
.LINE 162

	LD	BC,(IX+-5)
	CALL	__stoi
	LD	BC,HL
	LD	HL,244
	CALL	__imuls
	LD	(IX+-8),HL
	LD	HL,(IX+-8)
	LD	BC,_object
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+84
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+44
	LD	BC,L__22
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
	POP	BC
;  163	      }
;  164	   }
;  165	}
L_38:
.LINE 165

	LD	SP,IX
	POP	IX
	RET	


;**************************** _DescribeObject ***************************
;Name                         Addr/Register   Size   Type
;_map                                IMPORT    140   variable
;_object                             IMPORT    244   variable
;_special                            IMPORT    124   variable
;_printf                             IMPORT  -----   function
;obj                                   IX-5      2   variable
;i                                     IX-3      3   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "DescribeObject",165,"_DescribeObject"
	SEGMENT STRSECT
L__17:
	DB	"  %s"
	DB	10,0
L__18:
	DB	"  %s"
	DB	10,0
L__19:
	DB	"    %s"
	DB	10,0
L__22:
	DB	"  There %s %s here!"
	DB	10,0
	SEGMENT code
;  166	
;  167	
;  168	/* DescribeSpecial() - show special effect description
;  169	 *
;  170	 */
;  171	void DescribeSpecial(GAME_S_T *game)
;  172	{
_DescribeSpecial:
.DEFINE "_DescribeSpecial"

.VALUE _DescribeSpecial

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "DescribeSpecial",172,"_DescribeSpecial"

.LINE 172

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "sp"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

;  173	   INDEX_T	sp;
;  174	
;  175	   sp = map[game->current_room].special;
.LINE 175

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
	LD	IY,(IX+6)
	LD	BC,(IY+10)
	CALL	__stoi
	LD	BC,HL
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	BC,136
	LD	IY,HL
	CALL	__sldiy
	LD	BC,HL
	LD	(IX+-2),C
	LD	(IX+-1),B
;  176	
;  177	   if (sp > SE_NULL)
.LINE 177

	LD	BC,(IX+-2)
	CALL	__stoi
	LD	BC,HL
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L_40
;  178	   {
;  179	      printf("  %s\n", special[sp].phrase); 
.LINE 179

	LD	BC,(IX+-2)
	CALL	__stoi
	LD	BC,HL
	LD	HL,124
	CALL	__imuls
	LD	BC,_special
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+4
	LD	BC,L__25
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;  180	   }
;  181	}
L_40:
.LINE 181

	LD	SP,IX
	POP	IX
	RET	


;**************************** _DescribeSpecial ***************************
;Name                         Addr/Register   Size   Type
;_special                            IMPORT    124   variable
;_printf                             IMPORT  -----   function
;_map                                IMPORT    140   variable
;sp                                    IX-2      2   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "DescribeSpecial",181,"_DescribeSpecial"
	SEGMENT STRSECT
L__25:
	DB	"  %s"
	DB	10,0
	SEGMENT code
;  182	
;  183	
;  184	/* ShowScore() - show score and rank description
;  185	 *
;  186	 */
;  187	void ShowScore(GAME_S_T *game)
;  188	{
_ShowScore:
.DEFINE "_ShowScore"

.VALUE _ShowScore

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ShowScore",188,"_ShowScore"

.LINE 188

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "rk"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

;  189	   int rk;
;  190	
;  191	   printf("\nYour score is %d out of %d in %d moves.\n", 
;  192			game->score, MAX_SCORE, game->moves);
.LINE 192

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	LD	IY,(IX+6)
	LD	BC,(IY+18)
	PUSH	BC
	LD	BC,700
	PUSH	BC
	LD	IY,(IX+6)
	LD	BC,(IY+12)
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  193	
;  194	   if ( game->score >= MIN_SCORE && game->score < RANK_0_MAX )
.LINE 194

	LD	IY,(IX+6)
	LD	BC,0
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_55
	LD	IY,(IX+6)
	LD	BC,140
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	P,L_55
;  195	      rk = RK_RANK0;
.LINE 195

	LD	BC,0
	LD	(IX+-3),BC
;  196	   else if ( game->score >= RANK_0_MAX && game->score < RANK_1_MAX )
.LINE 196

	JMP	L_56
L_55:
	LD	IY,(IX+6)
	LD	BC,140
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_53
	LD	IY,(IX+6)
	LD	BC,280
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	P,L_53
;  197	      rk = RK_RANK1;
.LINE 197

	LD	BC,1
	LD	(IX+-3),BC
;  198	   else if ( game->score >= RANK_1_MAX && game->score < RANK_2_MAX )
.LINE 198

	JMP	L_56
L_53:
	LD	IY,(IX+6)
	LD	BC,280
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_51
	LD	IY,(IX+6)
	LD	BC,420
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	P,L_51
;  199	      rk = RK_RANK2;
.LINE 199

	LD	BC,2
	LD	(IX+-3),BC
;  200	   else if ( game->score >= RANK_2_MAX && game->score < RANK_3_MAX )
.LINE 200

	JMP	L_56
L_51:
	LD	IY,(IX+6)
	LD	BC,420
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_49
	LD	IY,(IX+6)
	LD	BC,560
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	P,L_49
;  201	      rk = RK_RANK3;
.LINE 201

	LD	BC,3
	LD	(IX+-3),BC
;  202	   else if ( game->score >= RANK_3_MAX && game->score < RANK_4_MAX )
.LINE 202

	JMP	L_56
L_49:
	LD	IY,(IX+6)
	LD	BC,560
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	M,L_47
	LD	IY,(IX+6)
	LD	BC,630
	LD	HL,(IY+12)
	OR	A,A
	SBC	HL,BC
	JP	P,L_47
;  203	      rk = RK_RANK4;
.LINE 203

	LD	BC,4
	LD	(IX+-3),BC
;  204	   else
.LINE 204

	JMP	L_56
L_47:
;  205	      rk = RK_RANK5;
.LINE 205

	LD	BC,5
	LD	(IX+-3),BC
L_56:
;  206	
;  207	   printf("\nYour rank is %s.  %s\n", rank[rk].title, rank[rk].phrase);
.LINE 207

	LD	BC,(IX+-3)
	LD	HL,162
	CALL	__imuls
	LD	(IX+-6),HL
	LD	HL,(IX+-6)
	LD	BC,_rank
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+42
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+2
	LD	BC,L__38
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
	POP	BC
;  208	}
.LINE 208

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ShowScore ***************************
;Name                         Addr/Register   Size   Type
;_rank                               IMPORT    162   variable
;_printf                             IMPORT  -----   function
;rk                                    IX-3      3   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ShowScore",208,"_ShowScore"
	SEGMENT STRSECT
L__27:
	DB	10
	DB	"Your score is %d out of %d in %d moves."
	DB	10,0
L__38:
	DB	10
	DB	"Your rank is %s.  %s"
	DB	10,0
	SEGMENT code
;  209	
;  210	
;  211	/* PlayerDied() - handle player's death
;  212	 *
;  213	 */
;  214	void PlayerDied(GAME_S_T *game)
;  215	{
_PlayerDied:
.DEFINE "_PlayerDied"

.VALUE _PlayerDied

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "PlayerDied",215,"_PlayerDied"

.LINE 215

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "response"

.CLASS 65

.VALUE -40

.DIM 40

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-40
	LD	SP,IY
;  216	   SHORT_BUFFER_T	response;
;  217	
;  218	   printf("\nYou have died a horrible death.\n");
	LD	BC,L__40
	PUSH	BC
.LINE 218

	CALL	_printf
	POP	BC
;  219	   ShowScore(game);
	LD	BC,(IX+6)
	PUSH	BC
.LINE 219

	CALL	_ShowScore
	POP	BC
;  220	   printf("\nHit any key to quit... ");
	LD	BC,L__41
	PUSH	BC
.LINE 220

	CALL	_printf
	POP	BC
;  221	   gets( response );
	PEA	IX+-40
.LINE 221

	CALL	_gets
	POP	BC
;  222	//   exit(0);
;  223	}
.LINE 223

	LD	SP,IX
	POP	IX
	RET	


;**************************** _PlayerDied ***************************
;Name                         Addr/Register   Size   Type
;_gets                               IMPORT  -----   function
;_printf                             IMPORT  -----   function
;response                             IX-40     40   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 49 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "PlayerDied",223,"_PlayerDied"
	SEGMENT STRSECT
L__40:
	DB	10
	DB	"You have died a horrible death."
	DB	10,0
L__41:
	DB	10
	DB	"Hit any key to quit... "
	DB	0
	SEGMENT code
;  224	
;  225	
;  226	/* CheckLamp() - handle lamp state, returns TRUE if lamp is on
;  227	 *
;  228	 */
;  229	BOOLEAN_T CheckLamp(GAME_S_T *game)
;  230	{
_CheckLamp:
.DEFINE "_CheckLamp"

.VALUE _CheckLamp

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "CheckLamp",230,"_CheckLamp"

.LINE 230

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

;  231	   if (game->lamp_is_on)
.LINE 231

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	IY,(IX+6)
	LD	A,(IY+9)
	OR	A,A
	JR	Z,L_67
;  232	   {
;  233	      if (game->oil < LOW_OIL)
.LINE 233

	LD	IY,(IX+6)
	LD	BC,10
	LD	HL,(IY+21)
	OR	A,A
	SBC	HL,BC
	JP	P,L_61
;  234	      {
;  235	         printf("\nYour lamp is low on oil.\n");
	LD	BC,L__45
	PUSH	BC
.LINE 235

	CALL	_printf
	POP	BC
;  236	      }
;  237	      else if (game->oil < 1)
.LINE 237

	JMP	L_68
L_61:
	LD	IY,(IX+6)
	LD	BC,1
	LD	HL,(IY+21)
	OR	A,A
	SBC	HL,BC
	JP	P,L_68
;  238	      {
;  239	         game->lamp_is_on = FALSE;
.LINE 239

	LD	IY,(IX+6)
	XOR	A,A
	LD	(IY+9),A
;  240	         printf("\nYour lamp has run out of oil.\n");
	LD	BC,L__47
	PUSH	BC
.LINE 240

	CALL	_printf
	POP	BC
;  241	         printf("It is dark.  If you proceed, it is likely that you\n");
	LD	BC,L__48
	PUSH	BC
.LINE 241

	CALL	_printf
	POP	BC
;  242	         printf("will take a nasty fall and hurt yourself.\n");
	LD	BC,L__49
	PUSH	BC
.LINE 242

	CALL	_printf
	POP	BC
;  243	      }
;  244	   }
;  245	   else
.LINE 245

	JMP	L_68
L_67:
;  246	   {
;  247	      if (map[game->current_room].inside)
.LINE 247

	LD	IY,(IX+6)
	LD	BC,(IY+10)
	CALL	__stoi
	LD	BC,HL
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+123)
	OR	A,A
	JR	Z,L_68
;  248	      {
;  249	         if ( game->health <= 0)
.LINE 249

	LD	IY,(IX+6)
	LD	BC,(IY+15)
	LD	HL,0
	OR	A,A
	SBC	HL,BC
	JP	M,L_63
;  250	         {
;  251	            PlayerDied( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 251

	CALL	_PlayerDied
	POP	BC
;  252	         }
;  253	         else
.LINE 253

	JMP	L_64
L_63:
;  254	         {
;  255	            printf("\nIt is dark.  If you proceed, it is likely that you\n");
	LD	BC,L__52
	PUSH	BC
.LINE 255

	CALL	_printf
	POP	BC
;  256	            printf("will take a nasty fall and hurt yourself.\n");
	LD	BC,L__53
	PUSH	BC
.LINE 256

	CALL	_printf
	POP	BC
;  257	            game->health -= DAMAGE_FALL;
	LD	DE,(IX+6)
.LINE 257

	LD	IY,(IX+6)
	LEA	HL,IY+15
	LD	IY,(HL)
	LEA	IY,IY+-25
	LD	BC,IY
	LD	IY,DE
	LD	(IY+15),BC
;  258	         }
L_64:
.LINE 258

;  259	         return(FALSE);
.LINE 259

	XOR	A,A
	JMP	L_69
;  260	      }
;  261	   }
L_68:
.LINE 261

;  262	
;  263	   return(TRUE);
.LINE 263

	LD	A,1
;  264	}
L_69:
.LINE 264

	LD	SP,IX
	POP	IX
	RET	


;**************************** _CheckLamp ***************************
;Name                         Addr/Register   Size   Type
;_map                                IMPORT    140   variable
;_printf                             IMPORT  -----   function
;game                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "CheckLamp",264,"_CheckLamp"
	SEGMENT STRSECT
L__45:
	DB	10
	DB	"Your lamp is low on oil."
	DB	10,0
L__47:
	DB	10
	DB	"Your lamp has run out of oil."
	DB	10,0
L__48:
	DB	"It is dark.  If you proceed, it is likely that you"
	DB	10,0
L__49:
	DB	"will take a nasty fall and hurt yourself."
	DB	10,0
L__52:
	DB	10
	DB	"It is dark.  If you proceed, it is likely that you"
	DB	10,0
L__53:
	DB	"will take a nasty fall and hurt yourself."
	DB	10,0
	SEGMENT code
;  265	
;  266	
;  267	/* ReadCommand() - read user command string
;  268	 *
;  269	 */
;  270	BOOLEAN_T ReadCommand(GAME_S_T *game)
;  271	{
_ReadCommand:
.DEFINE "_ReadCommand"

.VALUE _ReadCommand

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "ReadCommand",271,"_ReadCommand"

.LINE 271

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "cmd"

.CLASS 65

.VALUE -120

.DIM 120

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-120
	LD	SP,IY
;  272	   LONG_BUFFER_T	cmd;
;  273	
;  274	   printf("\n%s", PROMPT);
	LD	BC,L__55
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
.LINE 274

	CALL	_printf
	POP	BC
	POP	BC
;  275	//   fgets( cmd, LONG_BUFF_LEN, stdin );
;  276	   gets( cmd );
	PEA	IX+-120
.LINE 276

	CALL	_gets
	POP	BC
;  277	   strncpy( game->cmdstring, cmd, LONG_BUFF_LEN );
	LD	BC,120
	PUSH	BC
	PEA	IX+-120
.LINE 277

	LD	BC,(IX+6)
	LD	IY,182
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;  278	
;  279	   return(FALSE);
.LINE 279

	XOR	A,A
;  280	}
.LINE 280

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ReadCommand ***************************
;Name                         Addr/Register   Size   Type
;_strncpy                            IMPORT  -----   function
;_gets                               IMPORT  -----   function
;_printf                             IMPORT  -----   function
;cmd                                 IX-120    120   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 129 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ReadCommand",280,"_ReadCommand"
	SEGMENT STRSECT
L__55:
	DB	"> "
	DB	0
L__56:
	DB	10
	DB	"%s"
	DB	0
	SEGMENT code
;  281	
;  282	
;  283	/* ParseCommand() - read user command string
;  284	 *
;  285	 */
;  286	BOOLEAN_T ParseCommand(GAME_S_T *game)
;  287	{
_ParseCommand:
.DEFINE "_ParseCommand"

.VALUE _ParseCommand

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "ParseCommand",287,"_ParseCommand"

.LINE 287

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "argcount"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "cmdargs"

.CLASS 65

.VALUE -42

.DIM 12

.TYPE 354

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -45

.TYPE 34

.ENDEF

;  288	   char 	*buffer;
;  289	   char		*cmdargs[MAX_CMD_ARGS];
;  290	   int		i, argcount;
;  291	
;  292	   buffer = &game->cmdstring[0];
.LINE 292

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-51
	LD	SP,IY
	LD	BC,(IX+6)
	LD	IY,182
	ADD	IY,BC
	LD	(IX+-45),IY
;  293	   game->cmdstring[LONG_BUFF_LEN - 1] = '\0';
.LINE 293

	LD	IY,(IX+6)
;  294	
;  295	   argcount = ParseString( buffer, cmdargs );
	PEA	IX+-42
	LD	BC,(IX+-45)
	PUSH	BC
	XOR	A,A
	LD	BC,301
	CALL	__bstiy
.LINE 295

	LD	(IX+-51),IY
	CALL	_ParseString
	LD	IY,(IX+-51)
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  296	   game->argcount = argcount;
.LINE 296

	LD	IY,(IX+6)
	LD	BC,-6
	CALL	__ildix
	LD	BC,302
	CALL	__istiy
	LD	BC,0
	LD	(IX+-3),BC
;  297	
;  298	   for (i = 0; i < game->argcount; i++)
.LINE 298

	JMP	L_74
L_72:
;  299	   {
;  300	      game->list[i].type = 0;
.LINE 300

	LD	BC,(IX+-3)
	LD	HL,46
	CALL	__imuls
	LD	(IX+-48),HL
	LD	BC,(IX+6)
	LD	HL,305
	ADD	HL,BC
	LD	BC,(IX+-48)
	ADD	HL,BC
	LD	BC,0
	LD	(HL),BC
;  301	      game->list[i].length = strlen( cmdargs[i] );
.LINE 301

	LD	BC,(IX+-3)
	LD	HL,3
	CALL	__imuls
	LD	BC,HL
	LEA	HL,IX+-42
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	(IX+-51),IY
	CALL	_strlen
	LD	IY,(IX+-51)
	POP	BC
	LD	BC,HL
	LD	DE,(IX+6)
	LD	IY,305
	ADD	IY,DE
	LD	DE,(IX+-48)
	LD	HL,IY
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+3),BC
;  302	      strcpy( game->list[i].cmd, cmdargs[i] );
.LINE 302

	LD	BC,(IX+-3)
	LD	HL,3
	CALL	__imuls
	LD	BC,HL
	LEA	HL,IX+-42
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	DE,(IX+6)
	LD	BC,(IX+-3)
	LD	HL,46
	CALL	__imuls
	LD	IY,305
	ADD	IY,DE
	LD	BC,IY
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+6
	LD	(IX+-51),IY
	CALL	_strcpy
	LD	IY,(IX+-51)
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  303	   }
L_74:
.LINE 303

	LD	IY,(IX+6)
	LD	BC,302
	CALL	__ildiy
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_72
;  304	
;  305	   return(FALSE);
.LINE 305

	XOR	A,A
;  306	}
.LINE 306

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ParseCommand ***************************
;Name                         Addr/Register   Size   Type
;_strcpy                             IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;buffer                               IX-45      3   variable
;cmdargs                              IX-42     36   variable
;argcount                              IX-6      3   variable
;i                                     IX-3      3   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 60 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ParseCommand",306,"_ParseCommand"
;  307	
;  308	
;  309	/* GetCommand() - get user command string, and handle it
;  310	 *
;  311	 */
;  312	BOOLEAN_T GetCommand(GAME_S_T *game)
;  313	{
_GetCommand:
.DEFINE "_GetCommand"

.VALUE _GetCommand

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "GetCommand",313,"_GetCommand"

.LINE 313

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "response"

.CLASS 65

.VALUE -40

.DIM 40

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	IY,IX+-43
	LD	SP,IY
;  314	   SHORT_BUFFER_T	response;
;  315	
;  316	
;  317	   /*  read and parse command from player
;  318	    */
;  319	   ReadCommand( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 319

	LD	(IX+-43),IY
	CALL	_ReadCommand
	LD	IY,(IX+-43)
	POP	BC
;  320	   ParseCommand( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 320

	LD	(IX+-43),IY
	CALL	_ParseCommand
	LD	IY,(IX+-43)
	POP	BC
;  321	
;  322	
;  323	   /*  for single word commands 
;  324	    */
;  325	   if (game->argcount == 1)
.LINE 325

	LD	IY,(IX+6)
	LD	DE,1
	LD	BC,302
	CALL	__ildiy
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_87
;  326	   {
;  327	      if ( strcmp( game->list[0].cmd, "quit" ) == 0 
;  328			|| strcmp( game->list[0].cmd, "q" ) == 0 )
	LD	BC,L__61
	PUSH	BC
.LINE 328

	LD	BC,(IX+6)
	LD	IY,311
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_84
	LD	BC,L__63
	PUSH	BC
	LD	BC,(IX+6)
	LD	IY,311
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_85
L_84:
;  329	      {
;  330	         ShowScore(game);
	LD	BC,(IX+6)
	PUSH	BC
.LINE 330

	CALL	_ShowScore
	POP	BC
;  331	         printf("\nQuitting, are you sure? ");
	LD	BC,L__65
	PUSH	BC
.LINE 331

	CALL	_printf
	POP	BC
;  332	         gets( response );
	PEA	IX+-40
.LINE 332

	CALL	_gets
	POP	BC
;  333	         if ( response[0] == 'y' || response[0] == 'Y' )
.LINE 333

	LD	A,(IX+-40)
	SEXT	HL
	LD	L,(IX+-40)
	LD	BC,121
	OR	A,A
	SBC	HL,BC
	JR	Z,L_79
	LD	A,(IX+-40)
	SEXT	HL
	LD	L,(IX+-40)
	LD	BC,89
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_88
L_79:
;  334	            return(TRUE);
.LINE 334

	LD	A,1
	JMP	L_89
;  335	      }
;  336	      else if ( strcmp( game->list[0].cmd, "x" ) == 0 )
L_85:
.LINE 336

	LD	BC,L__68
	PUSH	BC
	LD	BC,(IX+6)
	LD	IY,311
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_83
;  337	      {
;  338	         return(TRUE);
.LINE 338

	LD	A,1
	JMP	L_89
;  339	      }
;  340	      else
L_83:
.LINE 340

;  341	      {
;  342	         if ( strlen( game->list[0].cmd ) == 1 )
.LINE 342

	LD	BC,(IX+6)
	LD	IY,311
	ADD	IY,BC
	LD	BC,IY
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_81
;  343	            HandleLetterCmd( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 343

	CALL	_HandleLetterCmd
	POP	BC
;  344	         else
.LINE 344

	JMP	L_88
L_81:
;  345	            HandleSingleCmd( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 345

	CALL	_HandleSingleCmd
	POP	BC
;  346	      }
;  347	   }
;  348	   else /* else, multi-word commands */
.LINE 348

	JMP	L_88
L_87:
;  349	   {
;  350	      HandleMultiCmd( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 350

	CALL	_HandleMultiCmd
	POP	BC
;  351	   }
L_88:
.LINE 351

;  352	
;  353	   return(FALSE);
.LINE 353

	XOR	A,A
;  354	}
L_89:
.LINE 354

	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetCommand ***************************
;Name                         Addr/Register   Size   Type
;_HandleMultiCmd                     IMPORT  -----   function
;_HandleSingleCmd                    IMPORT  -----   function
;_HandleLetterCmd                    IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_gets                               IMPORT  -----   function
;_printf                             IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;response                             IX-40     40   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "GetCommand",354,"_GetCommand"
	SEGMENT STRSECT
L__61:
	DB	"quit"
	DB	0
L__63:
	DB	"q"
	DB	0
L__65:
	DB	10
	DB	"Quitting, are you sure? "
	DB	0
L__68:
	DB	"x"
	DB	0
	SEGMENT code
;  355	
;  356	
;  357	/* PlayGame() - play the game, i.e. main game loop
;  358	 *
;  359	 */
;  360	void PlayGame(GAME_S_T *game)
;  361	{
_PlayGame:
.DEFINE "_PlayGame"

.VALUE _PlayGame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "PlayGame",361,"_PlayGame"

.LINE 361

.DEFINE "game"

.CLASS 65

.VALUE 6

.TAG "game_s_t"

.TYPE 40

.ENDEF

.DEFINE "current"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

.DEFINE "quit"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

;  362	   BOOLEAN_T	quit = FALSE; 
.LINE 362

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	XOR	A,A
	LD	(IX+-3),A
;  363	   INDEX_T	current;
;  364	
;  365	   current = game->current_room;
.LINE 365

	LD	IY,(IX+6)
	LD	BC,(IY+10)
	LD	(IX+-2),C
	LD	(IX+-1),B
;  366	
;  367	   while ( !quit )
.LINE 367

	JMP	L_103
L_104:
;  368	   {
;  369	      printf("%s\n", map[current].roomname);
.LINE 369

	LD	BC,(IX+-2)
	CALL	__stoi
	LD	BC,HL
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+2
	LD	BC,L__72
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;  370	
;  371	      if ( game->verbose && (map[current].beenhere == FALSE) )
.LINE 371

	LD	IY,(IX+6)
	LD	A,(IY+7)
	OR	A,A
	JR	Z,L_92
	LD	BC,(IX+-2)
	CALL	__stoi
	LD	BC,HL
	LD	HL,140
	CALL	__imuls
	LD	BC,_map
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+122)
	UEXT	HL
	LD	L,A
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_92
;  372	      {
;  373	         DescribeRoom(game);
	LD	BC,(IX+6)
	PUSH	BC
.LINE 373

	CALL	_DescribeRoom
	POP	BC
;  374	         DescribeSpecial(game);
	LD	BC,(IX+6)
	PUSH	BC
.LINE 374

	CALL	_DescribeSpecial
	POP	BC
;  375	      }
L_92:
.LINE 375

;  376	
;  377	      DescribeObject(game);
	LD	BC,(IX+6)
	PUSH	BC
.LINE 377

	CALL	_DescribeObject
	POP	BC
;  378	
;  379	      while ( !quit && (current == game->current_room) )
.LINE 379

	JMP	L_100
L_101:
;  380	      {
;  381	         quit = GetCommand( game );
	LD	BC,(IX+6)
	PUSH	BC
.LINE 381

	CALL	_GetCommand
	POP	BC
	LD	(IX+-3),A
;  382	         game->moves++;
	LD	DE,(IX+6)
.LINE 382

	LD	IY,(IX+6)
	LD	BC,(IY+18)
	INC	BC
	LD	IY,DE
	LD	(IY+18),BC
;  383	         if (game->lamp_is_on) 
.LINE 383

	LD	IY,(IX+6)
	LD	A,(IY+9)
	OR	A,A
	JR	Z,L_99
;  384	            game->oil--;
	LD	BC,(IX+6)
.LINE 384

	LD	IY,(IX+6)
	LEA	HL,IY+21
	LD	IY,(HL)
	LEA	IY,IY+-1
	LD	DE,IY
	LD	IY,BC
	LD	(IY+21),DE
L_99:
;  385	         if (game->health < MAX_HEALTH)
.LINE 385

	LD	IY,(IX+6)
	LD	BC,100
	LD	HL,(IY+15)
	OR	A,A
	SBC	HL,BC
	JP	P,L_100
;  386	            game->health++;
	LD	DE,(IX+6)
.LINE 386

	LD	IY,(IX+6)
	LD	BC,(IY+15)
	INC	BC
	LD	IY,DE
	LD	(IY+15),BC
;  387	      }
L_100:
.LINE 387

	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_102
	LD	IY,(IX+6)
	LD	BC,(IY+10)
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	Z,L_101
L_102:
;  388	
;  389	      current = game->current_room;
.LINE 389

	LD	IY,(IX+6)
	LD	BC,(IY+10)
	LD	(IX+-2),C
	LD	(IX+-1),B
;  390	   }
L_103:
.LINE 390

	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_104
;  391	}
.LINE 391

	LD	SP,IX
	POP	IX
	RET	


;**************************** _PlayGame ***************************
;Name                         Addr/Register   Size   Type
;_map                                IMPORT    140   variable
;_printf                             IMPORT  -----   function
;quit                                  IX-3      1   variable
;current                               IX-2      2   variable
;game                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "PlayGame",391,"_PlayGame"
	SEGMENT STRSECT
L__72:
	DB	"%s"
	DB	10,0
	XREF _HandleMultiCmd:ROM
	XREF _HandleSingleCmd:ROM
	XREF _HandleLetterCmd:ROM
	XREF _rank:ROM
	XREF _special:ROM
	XREF _object:ROM
	XREF _map:ROM
	XREF _room:ROM
	XREF _strlen:ROM
	XREF _strcmp:ROM
	XREF _strncpy:ROM
	XREF _strcpy:ROM
	XREF _gets:ROM
	XREF _printf:ROM
	XREF __imuls:ROM
	XREF __stoi:ROM
	XREF __ildix:ROM
	XREF __ildiy:ROM
	XREF __istiy:ROM
	XREF __bstiy:ROM
	XREF __sldiy:ROM
	XDEF _PlayGame
	XDEF _GetCommand
	XDEF _ParseCommand
	XDEF _ReadCommand
	XDEF _CheckLamp
	XDEF _PlayerDied
	XDEF _ShowScore
	XDEF _DescribeSpecial
	XDEF _DescribeObject
	XDEF _DescribeRoom
	XDEF _HaveObject
	XDEF _ParseString
	END

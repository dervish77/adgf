; ZiLOG eZ80 ANSI C Compiler Release 2.06
; -alias -debug -intsrc -nomodsect -optsize -localcse
; -peephole -globalopt -nosdiopt -bitfieldsize=24 -charsize=8
; -doublesize=32 -floatsize=32 -intsize=24 -longsize=32
; -nofastcall -noregvar -nostkck -nooptlink -swap 
	FILE	".\BUTTONS.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT code
;    1	/*                                                   Copyright (c) ZiLOG, 2003
;    2	 *****************************************************************************
;    3	 *  Buttons.c (1.0)
;    4	 *
;    5	 *  demo functions for buttons on the ZiLOG Development Board
;    6	 *****************************************************************************
;    7	 */
;    8	
;    9	#include <ez80.h>
;   10	
;   11	#include "LedMatrix.h"
;   12	
;   13	extern void set_vector(unsigned short vector,void (*hndlr)(void));
;   14	
;   15	/* Port B interrupt vectors for the various eZ80 and eZ80Acclaim! devices */
;   16	#ifdef _EZ80F91
;   17	#define PB0_IVECT 0xA0
;   18	#define PB1_IVECT 0xA4
;   19	#define PB2_IVECT 0xA8
;   20	#endif
;   21	
;   22	#ifdef _EZ80F93
;   23	#define PB0_IVECT 0x30
;   24	#define PB1_IVECT 0x32
;   25	#define PB2_IVECT 0x34
;   26	#endif
;   27	
;   28	#ifdef _EZ80F92
;   29	#define PB0_IVECT 0x30
;   30	#define PB1_IVECT 0x32
;   31	#define PB2_IVECT 0x34
;   32	#endif
;   33	
;   34	#ifdef _EZ80L92
;   35	#define PB0_IVECT 0x30
;   36	#define PB1_IVECT 0x32
;   37	#define PB2_IVECT 0x34
;   38	#endif
;   39	
;   40	#ifdef _EZ80190
;   41	#define PB0_IVECT 0x26
;   42	#define PB1_IVECT 0x28
;   43	#define PB2_IVECT 0x2a
;   44	#endif
;   45	
;   46	/*****************************************************************************
;   47	 *  GPIO Port B 0 interrupt service routine
;   48	 *
;   49	 *  display a 1 on the LED matrix
;   50	 */
;   51	void interrupt pb0_isr( void )
;   52	{
_pb0_isr:
.DEFINE "_pb0_isr"

.VALUE _pb0_isr

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "pb0_isr",52,"_pb0_isr"

;   53	    user_input = 1;
.LINE 53

	EXX	
	EX	AF,AF'
	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	A,1
	LD	(_user_input),A
;   54	    p_user_input = &matrix_char_map['1' - 31][0];
.LINE 54

	LD	BC,_matrix_char_map+126
	LD	(_p_user_input),BC
;   55		PB_DR = 0x01;
.LINE 55

	OUT0	(154),A
;   56	}
.LINE 56

	EXX	
	EX	AF,AF'
	LD	SP,IX
	POP	IX
	EI	
	RETI	


;**************************** _pb0_isr ***************************
;Name                         Addr/Register   Size   Type
;_p_user_input                       IMPORT      3   variable
;_matrix_char_map                    IMPORT    896   variable
;_user_input                         IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "pb0_isr",56,"_pb0_isr"
;   57	
;   58	/*****************************************************************************
;   59	 *  GPIO Port B 1 interrupt service routine
;   60	 *
;   61	 *  display a 2 on the LED matrix
;   62	 */
;   63	void interrupt pb1_isr( void )
;   64	{
_pb1_isr:
.DEFINE "_pb1_isr"

.VALUE _pb1_isr

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "pb1_isr",64,"_pb1_isr"

;   65	    user_input = 1;
.LINE 65

	EXX	
	EX	AF,AF'
	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	A,1
	LD	(_user_input),A
;   66	    p_user_input = &matrix_char_map['2' - 31][0];
.LINE 66

	LD	BC,_matrix_char_map+133
	LD	(_p_user_input),BC
;   67		PB_DR = 0x02;
.LINE 67

	LD	A,2
	OUT0	(154),A
;   68	}
.LINE 68

	EXX	
	EX	AF,AF'
	LD	SP,IX
	POP	IX
	EI	
	RETI	


;**************************** _pb1_isr ***************************
;Name                         Addr/Register   Size   Type
;_p_user_input                       IMPORT      3   variable
;_matrix_char_map                    IMPORT    896   variable
;_user_input                         IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "pb1_isr",68,"_pb1_isr"
;   69	
;   70	/*****************************************************************************
;   71	 *  GPIO Port B 2 interrupt service routine
;   72	 *
;   73	 *  display a 3 on the LED matrix
;   74	 */
;   75	void interrupt pb2_isr( void )
;   76	{
_pb2_isr:
.DEFINE "_pb2_isr"

.VALUE _pb2_isr

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "pb2_isr",76,"_pb2_isr"

;   77	    user_input = 1;
.LINE 77

	EXX	
	EX	AF,AF'
	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	A,1
	LD	(_user_input),A
;   78	    p_user_input = &matrix_char_map['3' - 31][0];
.LINE 78

	LD	BC,_matrix_char_map+140
	LD	(_p_user_input),BC
;   79		PB_DR = 0x04;
.LINE 79

	LD	A,4
	OUT0	(154),A
;   80	
;   81	}
.LINE 81

	EXX	
	EX	AF,AF'
	LD	SP,IX
	POP	IX
	EI	
	RETI	


;**************************** _pb2_isr ***************************
;Name                         Addr/Register   Size   Type
;_p_user_input                       IMPORT      3   variable
;_matrix_char_map                    IMPORT    896   variable
;_user_input                         IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "pb2_isr",81,"_pb2_isr"
;   82	
;   83	
;   84	/*****************************************************************************
;   85	 *  Buttons initialization routine
;   86	 *
;   87	 *  
;   88	 */
;   89	void interrupt buttons_init( void )
;   90	{
_buttons_init:
.DEFINE "_buttons_init"

.VALUE _buttons_init

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "buttons_init",90,"_buttons_init"

	PUSH	IY
	EXX	
	EX	AF,AF'
	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   91	    
;   92		/* set port B 0 interrupt vector */
;   93	    set_vector( PB0_IVECT, pb0_isr );
	LD	BC,_pb0_isr
	PUSH	BC
	LD	BC,160
	PUSH	BC
.LINE 93

	CALL	_set_vector
	POP	BC
	POP	BC
;   94		
;   95		/* set port B 1 interrupt vector */
;   96	    set_vector( PB1_IVECT, pb1_isr );
	LD	BC,_pb1_isr
	PUSH	BC
	LD	BC,164
	PUSH	BC
.LINE 96

	CALL	_set_vector
	POP	BC
	POP	BC
;   97		
;   98		/* set port B 2 interrupt vector */
;   99	    set_vector( PB2_IVECT, pb2_isr );
	LD	BC,_pb2_isr
	PUSH	BC
	LD	BC,168
	PUSH	BC
.LINE 99

	CALL	_set_vector
	POP	BC
	POP	BC
;  100	
;  101	    //Set the Port B bits 0, 1, and 2 to falling edge triggered interrupt mode
;  102		PB_ALT2 |= 0x07;
.LINE 102

	IN0	A,(157)
	UEXT	HL
	LD	L,A
	LD	BC,7
	CALL	__ior
	LD	A,L
	OUT0	(157),A
;  103		PB_ALT1 |= 0x07;
.LINE 103

	IN0	A,(156)
	UEXT	HL
	LD	L,A
	LD	BC,7
	CALL	__ior
	LD	A,L
	OUT0	(156),A
;  104		PB_DDR |= 0x07;
.LINE 104

	IN0	A,(155)
	UEXT	HL
	LD	L,A
	LD	BC,7
	CALL	__ior
	LD	A,L
	OUT0	(155),A
;  105		PB_DR = 0x00;
.LINE 105

	XOR	A,A
	OUT0	(154),A
;  106	
;  107	}
.LINE 107

	EXX	
	EX	AF,AF'
	LD	SP,IX
	POP	IX
	POP	IY
	EI	
	RETI	


;**************************** _buttons_init ***************************
;Name                         Addr/Register   Size   Type
;_set_vector                         IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "buttons_init",107,"_buttons_init"
	XREF _set_vector:ROM
	XREF _matrix_char_map:ROM
	XREF _user_input:ROM
	XREF _p_user_input:ROM
	XREF __ior:ROM
	XDEF _buttons_init
	XDEF _pb2_isr
	XDEF _pb1_isr
	XDEF _pb0_isr
	END

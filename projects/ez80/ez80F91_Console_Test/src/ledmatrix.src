; ZiLOG eZ80 ANSI C Compiler Release 2.06
; -alias -debug -intsrc -nomodsect -optsize -localcse
; -peephole -globalopt -nosdiopt -bitfieldsize=24 -charsize=8
; -doublesize=32 -floatsize=32 -intsize=24 -longsize=32
; -nofastcall -noregvar -nostkck -nooptlink -swap 
	FILE	".\LEDMATRIX.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT BSS
_pcolumn:
	DS	3
.DEFINE "pcolumn"
.ALIAS "_pcolumn"
.CLASS 83
.VALUE _pcolumn
.TYPE 44
.ENDEF
_p_user_input:
	DS	3
.DEFINE "p_user_input"
.ALIAS "_p_user_input"
.CLASS 83
.VALUE _p_user_input
.TYPE 44
.ENDEF
_user_input:
	DS	1
.DEFINE "user_input"
.ALIAS "_user_input"
.CLASS 83
.VALUE _user_input
.TYPE 2
.ENDEF
;    1	/*                                                   Copyright (c) ZiLOG, 2003
;    2	 *****************************************************************************
;    3	 *  LedMatrix.c (1.0)
;    4	 *
;    5	 *  functions for LED matrix on eZ80 Development Board
;    6	 *****************************************************************************
;    7	 */
;    8	
;    9	#include <ez80.h>
;   10	#include <string.h>
;   11	
;   12	#include "LedMatrix.h"
;   13	#include "LedTimer.h"
;   14	
;   15	
;   16	/*  LED matrix display pointer, what ever 5 byte string this points to will
;   17	 *  be displayed
;   18	 */
;   19	unsigned char *pcolumn;
;   20	unsigned char *p_user_input;
;   21	char user_input;
	SEGMENT code
;   22	
;   23	
;   24	/*****************************************************************************
;   25	 *  ledmatrix_init()
;   26	 *
;   27	 *  setup peripherals to use the LED matix
;   28	 */
;   29	void ledmatrix_init( void )
;   30	{
_ledmatrix_init:
.DEFINE "_ledmatrix_init"

.VALUE _ledmatrix_init

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_init",30,"_ledmatrix_init"

;   31	    /* map LED Matrix at 800000h with Chip Select 2 */
;   32	    CS2_LBR = 0x80;
.LINE 32

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	A,128
	OUT0	(174),A
;   33	    CS2_UBR = 0xbf;
.LINE 33

	LD	A,191
	OUT0	(175),A
;   34	    CS2_CTL = 0x28;
.LINE 34

	LD	A,40
	OUT0	(176),A
;   35		/* clear display */
;   36		ledmatrix_clear();
.LINE 36

	CALL	_ledmatrix_clear
;   37	
;   38		user_input = 0;
.LINE 38

	XOR	A,A
	LD	(_user_input),A
;   39		p_user_input = &matrix_char_map[1][0];
.LINE 39

	LD	BC,_matrix_char_map+7
	LD	(_p_user_input),BC
;   40	}
.LINE 40

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_init ***************************
;Name                         Addr/Register   Size   Type
;_p_user_input                       STATIC      3   variable
;_matrix_char_map                    IMPORT    896   variable
;_user_input                         STATIC      1   variable
;_ledmatrix_clear                    IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_init",40,"_ledmatrix_init"
;   41	
;   42	
;   43	/*****************************************************************************
;   44	 *  ledmatrix_clear()
;   45	 *
;   46	 *  clear LED matrix
;   47	 */
;   48	void ledmatrix_clear( void )
;   49	{
_ledmatrix_clear:
.DEFINE "_ledmatrix_clear"

.VALUE _ledmatrix_clear

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_clear",49,"_ledmatrix_clear"

;   50		pcolumn = &matrix_char_map[1][0];
.LINE 50

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	BC,_matrix_char_map+7
	LD	(_pcolumn),BC
;   51	}
.LINE 51

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_clear ***************************
;Name                         Addr/Register   Size   Type
;_pcolumn                            STATIC      3   variable
;_matrix_char_map                    IMPORT    896   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_clear",51,"_ledmatrix_clear"
;   52	
;   53	
;   54	/*****************************************************************************
;   55	 *  ledmatrix_fill()
;   56	 *
;   57	 *  fill LED matrix
;   58	 */
;   59	void ledmatrix_fill( void )
;   60	{
_ledmatrix_fill:
.DEFINE "_ledmatrix_fill"

.VALUE _ledmatrix_fill

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_fill",60,"_ledmatrix_fill"

;   61		pcolumn = &matrix_char_map[0][0];
.LINE 61

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	BC,_matrix_char_map
	LD	(_pcolumn),BC
;   62	}
.LINE 62

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_fill ***************************
;Name                         Addr/Register   Size   Type
;_pcolumn                            STATIC      3   variable
;_matrix_char_map                    IMPORT    896   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_fill",62,"_ledmatrix_fill"
;   63	
;   64	
;   65	/*****************************************************************************
;   66	 *  ledmatrix_putc( character )
;   67	 *
;   68	 *  ouput a character to the LED Matrix
;   69	 */
;   70	void ledmatrix_putc( char c )
;   71	{
_ledmatrix_putc:
.DEFINE "_ledmatrix_putc"

.VALUE _ledmatrix_putc

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_putc",71,"_ledmatrix_putc"

.LINE 71

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 2

.ENDEF

.DEFINE "index"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

;   72		char index;
;   73		
;   74		/* align ascii character to this programs character map */
;   75	    index = c - 31;
.LINE 75

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	LD	A,(IX+6)
	SEXT	HL
	LD	L,(IX+6)
	LD	IY,HL
	LEA	IY,IY+-31
	LD	HL,IY
	LD	(IX+-1),L
;   76		pcolumn = &matrix_char_map[index][0];
.LINE 76

	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	HL,7
	CALL	__imuls
	LD	BC,_matrix_char_map
	ADD	HL,BC
	LD	(_pcolumn),HL
;   77	}
.LINE 77

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_putc ***************************
;Name                         Addr/Register   Size   Type
;_pcolumn                            STATIC      3   variable
;_matrix_char_map                    IMPORT    896   variable
;index                                 IX-1      1   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_putc",77,"_ledmatrix_putc"
;   78	
;   79	
;   80	/*****************************************************************************
;   81	 *  ledmatrix_puts( string pointer )
;   82	 *
;   83	 *  ouput a character string to the LED Matrix
;   84	 */
;   85	void ledmatrix_puts( char *str )
;   86	{
_ledmatrix_puts:
.DEFINE "_ledmatrix_puts"

.VALUE _ledmatrix_puts

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_puts",86,"_ledmatrix_puts"

.LINE 86

.DEFINE "str"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -3

.TYPE 34

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

;   87		char *c;
;   88		int i;
;   89	
;   90		c = str;
.LINE 90

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+6)
	LD	(IX+-3),BC
	LD	BC,0
	LD	(IX+-6),BC
;   91	
;   92		for( i=0; i<strlen(str); i++ )
.LINE 92

	JMP	L_7
L_5:
;   93		{
;   94		    /* place character */
;   95	        ledmatrix_putc( *(str + i) );
.LINE 95

	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	B,0
	LD	C,(HL)
	PUSH	BC
	CALL	_ledmatrix_putc
	POP	BC
;   96			wait( 500 );
	LD	BC,500
	PUSH	BC
.LINE 96

	CALL	_wait
	POP	BC
;   97	
;   98		    /* briefly clear the display to cause a character change effect */
;   99			ledmatrix_clear();
.LINE 99

	CALL	_ledmatrix_clear
;  100	        wait( 50 );
	LD	BC,50
	PUSH	BC
.LINE 100

	CALL	_wait
	POP	BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  101		}
L_7:
.LINE 101

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_5
;  102	}
.LINE 102

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_puts ***************************
;Name                         Addr/Register   Size   Type
;_strlen                             IMPORT  -----   function
;_ledmatrix_clear                    IMPORT  -----   function
;_wait                               IMPORT  -----   function
;_ledmatrix_putc                     IMPORT  -----   function
;i                                     IX-6      3   variable
;c                                     IX-3      3   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_puts",102,"_ledmatrix_puts"
;  103	
;  104	
;  105	/*****************************************************************************
;  106	 *  ledmatrix_spin()
;  107	 *
;  108	 *  make display appear to spin
;  109	 */
;  110	void ledmatrix_spin( void )
;  111	{
_ledmatrix_spin:
.DEFINE "_ledmatrix_spin"

.VALUE _ledmatrix_spin

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_spin",111,"_ledmatrix_spin"

.LINE 111

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	LD	BC,0
	LD	(IX+-3),BC
;  112	    int i;
;  113	
;  114	  	for( i=0; i<15; i++ )
.LINE 114

	JMP	L_12
L_10:
;  115		{
;  116		
;  117	        ledmatrix_putc('l');
	LD	BC,108
	PUSH	BC
.LINE 117

	CALL	_ledmatrix_putc
	POP	BC
;  118			wait( 60 );
	LD	BC,60
	PUSH	BC
.LINE 118

	CALL	_wait
	POP	BC
;  119	
;  120	        ledmatrix_putc('/');
	LD	BC,47
	PUSH	BC
.LINE 120

	CALL	_ledmatrix_putc
	POP	BC
;  121			wait( 60 );
	LD	BC,60
	PUSH	BC
.LINE 121

	CALL	_wait
	POP	BC
;  122	
;  123	        ledmatrix_putc('-');
	LD	BC,45
	PUSH	BC
.LINE 123

	CALL	_ledmatrix_putc
	POP	BC
;  124			wait( 60 );
	LD	BC,60
	PUSH	BC
.LINE 124

	CALL	_wait
	POP	BC
;  125	
;  126	        ledmatrix_putc('\\');
	LD	BC,92
	PUSH	BC
.LINE 126

	CALL	_ledmatrix_putc
	POP	BC
;  127			wait( 60 );
	LD	BC,60
	PUSH	BC
.LINE 127

	CALL	_wait
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  128	
;  129	    }
L_12:
.LINE 129

	LD	BC,15
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_10
;  130	}
.LINE 130

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_spin ***************************
;Name                         Addr/Register   Size   Type
;_wait                               IMPORT  -----   function
;_ledmatrix_putc                     IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_spin",130,"_ledmatrix_spin"
;  131	
;  132	
;  133	/*****************************************************************************
;  134	 *  ledmatrix_flash()
;  135	 *
;  136	 *  This is a flashing display function
;  137	 */
;  138	void ledmatrix_flash( void )
;  139	{
_ledmatrix_flash:
.DEFINE "_ledmatrix_flash"

.VALUE _ledmatrix_flash

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_flash",139,"_ledmatrix_flash"

.LINE 139

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	LD	BC,0
	LD	(IX+-3),BC
;  140	    int i;
;  141	
;  142	  	for( i=0; i<2; i++ )
.LINE 142

	JMP	L_17
L_15:
;  143		{
;  144		
;  145	        ledmatrix_fill();
.LINE 145

	CALL	_ledmatrix_fill
;  146			wait( 200 );
	LD	BC,200
	PUSH	BC
.LINE 146

	CALL	_wait
	POP	BC
;  147	
;  148	        ledmatrix_clear();
.LINE 148

	CALL	_ledmatrix_clear
;  149			wait( 200 );
	LD	BC,200
	PUSH	BC
.LINE 149

	CALL	_wait
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  150	    }
L_17:
.LINE 150

	LD	BC,2
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_15
;  151	}
.LINE 151

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_flash ***************************
;Name                         Addr/Register   Size   Type
;_ledmatrix_clear                    IMPORT  -----   function
;_wait                               IMPORT  -----   function
;_ledmatrix_fill                     IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_flash",151,"_ledmatrix_flash"
;  152	
;  153	
;  154	/*****************************************************************************
;  155	 *  displays each character map entry
;  156	 *
;  157	 *  flash a bunch of data on the LED Matrix
;  158	 */
;  159	void ledmatrix_test( void )
;  160	{
_ledmatrix_test:
.DEFINE "_ledmatrix_test"

.VALUE _ledmatrix_test

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ledmatrix_test",160,"_ledmatrix_test"

.LINE 160

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	LD	BC,31
	LD	(IX+-3),BC
;  161	    int i;
;  162	
;  163	    /* run through the LED matrix character map */
;  164	    for( i=31; i<129; i++ )
.LINE 164

	JMP	L_22
L_20:
;  165		{
;  166		    ledmatrix_putc( i );
.LINE 166

	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	CALL	_ledmatrix_putc
	POP	BC
;  167			wait( 50 );
	LD	BC,50
	PUSH	BC
.LINE 167

	CALL	_wait
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  168	    }
L_22:
.LINE 168

	LD	BC,129
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_20
;  169	}
.LINE 169

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ledmatrix_test ***************************
;Name                         Addr/Register   Size   Type
;_wait                               IMPORT  -----   function
;_ledmatrix_putc                     IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ledmatrix_test",169,"_ledmatrix_test"
	SEGMENT DATA
_matrix_char_map:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	31
	DB	27
	DB	21
	DB	21
	DB	21
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	21
	DB	0
	DB	21
	DB	0
	DB	21
	DB	31
	DB	27
	DB	17
	DB	10
	DB	17
	DB	10
	DB	17
	DB	27
	DB	31
	DB	30
	DB	21
	DB	27
	DB	21
	DB	15
	DB	31
	DB	17
	DB	14
	DB	14
	DB	17
	DB	21
	DB	14
	DB	16
	DB	27
	DB	27
	DB	27
	DB	31
	DB	31
	DB	31
	DB	31
	DB	29
	DB	27
	DB	23
	DB	23
	DB	23
	DB	27
	DB	29
	DB	23
	DB	27
	DB	29
	DB	29
	DB	29
	DB	27
	DB	23
	DB	31
	DB	10
	DB	17
	DB	0
	DB	17
	DB	10
	DB	31
	DB	31
	DB	27
	DB	27
	DB	0
	DB	27
	DB	27
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	27
	DB	23
	DB	31
	DB	31
	DB	31
	DB	0
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	27
	DB	31
	DB	30
	DB	29
	DB	27
	DB	23
	DB	15
	DB	31
	DB	17
	DB	14
	DB	12
	DB	10
	DB	6
	DB	14
	DB	17
	DB	27
	DB	19
	DB	27
	DB	27
	DB	27
	DB	27
	DB	17
	DB	17
	DB	14
	DB	29
	DB	27
	DB	23
	DB	15
	DB	0
	DB	17
	DB	14
	DB	30
	DB	25
	DB	30
	DB	14
	DB	17
	DB	14
	DB	14
	DB	14
	DB	16
	DB	30
	DB	30
	DB	30
	DB	0
	DB	15
	DB	15
	DB	1
	DB	30
	DB	14
	DB	17
	DB	17
	DB	15
	DB	15
	DB	1
	DB	14
	DB	14
	DB	17
	DB	0
	DB	30
	DB	30
	DB	29
	DB	27
	DB	27
	DB	27
	DB	17
	DB	14
	DB	14
	DB	17
	DB	14
	DB	14
	DB	17
	DB	17
	DB	14
	DB	14
	DB	16
	DB	30
	DB	29
	DB	27
	DB	31
	DB	31
	DB	27
	DB	31
	DB	27
	DB	31
	DB	31
	DB	31
	DB	31
	DB	27
	DB	31
	DB	27
	DB	23
	DB	31
	DB	29
	DB	27
	DB	23
	DB	15
	DB	23
	DB	27
	DB	29
	DB	31
	DB	31
	DB	0
	DB	31
	DB	0
	DB	31
	DB	31
	DB	23
	DB	27
	DB	29
	DB	30
	DB	29
	DB	27
	DB	23
	DB	17
	DB	14
	DB	13
	DB	27
	DB	27
	DB	31
	DB	27
	DB	17
	DB	10
	DB	4
	DB	4
	DB	5
	DB	10
	DB	17
	DB	17
	DB	14
	DB	14
	DB	14
	DB	0
	DB	14
	DB	14
	DB	1
	DB	14
	DB	14
	DB	1
	DB	14
	DB	14
	DB	1
	DB	17
	DB	14
	DB	15
	DB	15
	DB	15
	DB	14
	DB	17
	DB	1
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	1
	DB	0
	DB	15
	DB	15
	DB	1
	DB	15
	DB	15
	DB	0
	DB	0
	DB	15
	DB	15
	DB	1
	DB	15
	DB	15
	DB	15
	DB	17
	DB	14
	DB	15
	DB	8
	DB	14
	DB	14
	DB	17
	DB	14
	DB	14
	DB	14
	DB	0
	DB	14
	DB	14
	DB	14
	DB	0
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	0
	DB	0
	DB	29
	DB	29
	DB	29
	DB	13
	DB	13
	DB	19
	DB	14
	DB	13
	DB	11
	DB	7
	DB	11
	DB	13
	DB	14
	DB	15
	DB	15
	DB	15
	DB	15
	DB	15
	DB	15
	DB	0
	DB	14
	DB	4
	DB	10
	DB	10
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	6
	DB	10
	DB	12
	DB	14
	DB	14
	DB	17
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	17
	DB	1
	DB	14
	DB	14
	DB	1
	DB	15
	DB	15
	DB	15
	DB	17
	DB	14
	DB	14
	DB	14
	DB	10
	DB	12
	DB	16
	DB	1
	DB	14
	DB	14
	DB	1
	DB	11
	DB	13
	DB	14
	DB	17
	DB	14
	DB	15
	DB	17
	DB	30
	DB	14
	DB	17
	DB	0
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	17
	DB	14
	DB	14
	DB	14
	DB	14
	DB	14
	DB	21
	DB	27
	DB	14
	DB	14
	DB	10
	DB	10
	DB	10
	DB	10
	DB	21
	DB	14
	DB	14
	DB	21
	DB	27
	DB	21
	DB	14
	DB	14
	DB	14
	DB	14
	DB	21
	DB	27
	DB	27
	DB	27
	DB	27
	DB	0
	DB	30
	DB	29
	DB	27
	DB	23
	DB	15
	DB	0
	DB	3
	DB	15
	DB	15
	DB	15
	DB	15
	DB	15
	DB	3
	DB	31
	DB	15
	DB	23
	DB	27
	DB	29
	DB	30
	DB	31
	DB	28
	DB	30
	DB	30
	DB	30
	DB	30
	DB	30
	DB	28
	DB	27
	DB	21
	DB	14
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	0
	DB	27
	DB	27
	DB	27
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	25
	DB	22
	DB	22
	DB	22
	DB	24
	DB	23
	DB	23
	DB	17
	DB	22
	DB	22
	DB	22
	DB	17
	DB	31
	DB	31
	DB	25
	DB	22
	DB	23
	DB	22
	DB	25
	DB	30
	DB	30
	DB	24
	DB	22
	DB	22
	DB	22
	DB	24
	DB	31
	DB	31
	DB	25
	DB	16
	DB	23
	DB	22
	DB	25
	DB	29
	DB	26
	DB	27
	DB	17
	DB	27
	DB	27
	DB	27
	DB	31
	DB	25
	DB	22
	DB	22
	DB	24
	DB	22
	DB	25
	DB	23
	DB	23
	DB	17
	DB	22
	DB	22
	DB	22
	DB	22
	DB	31
	DB	31
	DB	27
	DB	31
	DB	27
	DB	27
	DB	27
	DB	31
	DB	29
	DB	31
	DB	29
	DB	29
	DB	29
	DB	19
	DB	23
	DB	23
	DB	21
	DB	19
	DB	19
	DB	21
	DB	22
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	27
	DB	31
	DB	31
	DB	5
	DB	10
	DB	10
	DB	10
	DB	10
	DB	31
	DB	31
	DB	17
	DB	22
	DB	22
	DB	22
	DB	22
	DB	31
	DB	31
	DB	25
	DB	22
	DB	22
	DB	22
	DB	25
	DB	31
	DB	17
	DB	22
	DB	22
	DB	17
	DB	23
	DB	23
	DB	31
	DB	24
	DB	22
	DB	22
	DB	24
	DB	30
	DB	30
	DB	31
	DB	31
	DB	17
	DB	22
	DB	23
	DB	23
	DB	23
	DB	31
	DB	31
	DB	24
	DB	23
	DB	25
	DB	30
	DB	17
	DB	31
	DB	31
	DB	27
	DB	17
	DB	27
	DB	27
	DB	27
	DB	31
	DB	31
	DB	22
	DB	22
	DB	22
	DB	22
	DB	24
	DB	31
	DB	31
	DB	22
	DB	22
	DB	22
	DB	22
	DB	25
	DB	31
	DB	31
	DB	10
	DB	10
	DB	10
	DB	10
	DB	21
	DB	31
	DB	31
	DB	14
	DB	21
	DB	27
	DB	21
	DB	14
	DB	31
	DB	26
	DB	26
	DB	26
	DB	29
	DB	27
	DB	23
	DB	31
	DB	31
	DB	16
	DB	29
	DB	27
	DB	23
	DB	16
	DB	29
	DB	27
	DB	27
	DB	23
	DB	27
	DB	27
	DB	29
	DB	27
	DB	27
	DB	27
	DB	31
	DB	27
	DB	27
	DB	27
	DB	23
	DB	27
	DB	27
	DB	29
	DB	27
	DB	27
	DB	23
	DB	31
	DB	26
	DB	21
	DB	31
	DB	31
	DB	31
	DB	31
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
.DEFINE "matrix_char_map"
.ALIAS "_matrix_char_map"
.CLASS 69
.VALUE _matrix_char_map
.DIM 128
.DIM 7
.TYPE 876
.ENDEF
	XREF _wait:ROM
	XREF _strlen:ROM
	XREF __imuls:ROM
	XDEF _matrix_char_map
	XDEF _ledmatrix_test
	XDEF _ledmatrix_flash
	XDEF _ledmatrix_spin
	XDEF _ledmatrix_puts
	XDEF _ledmatrix_putc
	XDEF _ledmatrix_fill
	XDEF _ledmatrix_clear
	XDEF _ledmatrix_init
	XDEF _user_input
	XDEF _p_user_input
	XDEF _pcolumn
;  170	
;  171	
;  172	/*****************************************************************************
;  173	 *  5x7 LED matrix character map
;  174	 *  this maps the column bit assignments (bits 0-4)
;  175	 */
;  176	unsigned char matrix_char_map[128][7] = {
	END

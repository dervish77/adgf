STACK language
==============


Machine model


              memory
                |
                |
      program--CPU--stack
                |
                |
         program counter (PC)


                   +------------+
    SP      0x0FFF |   Stack    |
                   |            |
            0x0F00 |------------|
                   |    Data    |
                   |            |
    DR      0x0C00 |------------|
                   |            |
                   |            |
                   |            |
                   |  Program   |
                   |            |
                   |            |
    PC      0x0000 |            |
	               +------------+


Registers (all 16 bits)

    PC         program counter - grows up from <bottom of mem>
    SP         stack pointer - grows down from <top of mem>
    DR         data register (hidden) - points to <mem above top of program>
    AC         accumulator (hidden) - used for math operations


Instruction model

    OPERATION

    OPERATION <direct operand>

    OPERATION <memory address>

    OPERATION <label>



Instructions

(Note, unless otherwise noted all instruction end with PC + 1 -> PC)

CLR         clear the stack                             <mem top> -> SP

END         end of program (aka HALT)                   PC -> PC

NOP         no operation

RST         reset cpu                                   0 -> AC
                                                        0 -> DR
                                                        <mem top> -> SP
                                                        0 -> PC

LDM <mem>   loads data from memory to top of stack      <mem> -> DR
                                                        M[DR] -> S[0]

LDI         increments DR, load data mem to TOS         DR + 1 -> DR
                                                        M[DR] -> S[0]

STM <mem>   stores data from top of stack to memory     <mem> -> DR
                                                        S[0] -> M[DR]

STI         increments DR, stores TOS to data mem       DR + 1 -> DR
                                                        S[0] -> M[DR]

PSH <do>    push direct data to top of stack            <do> -> AC
                                                        push AC -> S[0]

POP         pops top of stack                           pop S[0] -> AC
                                                        0 -> AC

ADD         adds top two stack values                   S[1] -> AC
                                                        AC = AC + S[0]
                                                        push AC -> S[0]

SUB         subtracts top two stack values              S[1] -> AC
                                                        AC = AC - S[0]
                                                        push AC -> S[0]

NEG         negates top of stack                        0 -> AC
                                                        AC = AC - S[0]
                                                        push AC -> S[0]

CPE <do>    compare if top of stack is equal            <do> -> AC
                                                        if S[0] equal AC,
                                                          push 1 -> S[0]
                                                        else, 
                                                          push 0 -> S[0]

CNE <do>    compare if top of stack is not equal        <do> -> AC
                                                        if S[0] not equal AC,
                                                          push 1 -> S[0]
                                                        else, 
                                                          push 0 -> S[0]

BRN <label> branch if top of stack is not zero          pop S[0] -> AC
                                                        if AC not equal to 0,
                                                          <label> -> PC
                                                        else, 
                                                          PC + 1 -> PC

BRZ <label> branch if top of stack is zero              pop S[0] -> AC
                                                        if AC equal to 0, 
                                                          <label> -> PC
                                                        else,
                                                          PC + 1 -> PC

BRU         branch unconditionally                      <label> -> PC


Special instructions

PRT         prints top of stack, stack unchanged        S[0] -> <print>

PRI <index> prints stack at <index>, stack unchanged    S[index] -> <print>

PRD         prints current stack depth                  depth of S -> <print>

(Note, <print> is std output interface)


Example programs

    // prints Hello

        CLR
        PSH "H"
        PRT
        PSH "E"
        PRT
        PSH "L"
        PRT
        PSH "L"
        PRT
        PSH "O"
        PRT
        PSH 13          // CR
        PRT
        PSH 10          // LF
        PRT
        END


    // adds numbers from 1 to 5, prints sum

        CLR
        PSH 1
        PSH 2
        ADD
        PSH 3
        ADD
        PSH 4
        ADD
        PSH 5
        ADD
        PRT
        END


    // adds numbers from 1 to 10 in a loop, prints sum

        CLR
        PSH 0
        STM 0x0C00      // clear sum in memory
        POP
        NOP
        PSH 0           // push "last" value on stack
        NOP
        PSH 1
iloop:  PSH 1           // incr value
        ADD
        CPE 10
        BRN iloop       // loop to push next incr value on stack
        NOP
aloop:  LDM 0x0C00
        ADD
        STM 0x0C00
        POP
        CPE 0
        BRN aloop       // loop to add next num to sum
        NOP
        LDM 0x0C00
        PRT             // print sum
        END


